}
#isRecurrent(x11, depth = 2)
#isRecurrent(x12, depth = 2)
train <- read.csv("../input/train.csv", stringsAsFactors = FALSE, nrow = 1000)
sequences <- lapply(strsplit(train$Sequence, split = ","), FUN = as.numeric)
rec2 <- lapply(sequences, isRecurrent, depth = 2)
# x[j]   = a * x[j-1] + b * x[j-2]
# x[j+1] = a * x[j]   + b * x[j-1]
solveRecurrent <- function(x, depth, offset) {
A <- matrix(0, nrow = depth, ncol = depth)
b <- matrix(0, nrow = depth, ncol = 1)
for (r in 1:depth) {
for (c in 1:depth) {
A[r, c] <- x[offset + (r - 1) + (c-1)]
}
b[r] <- x[offset + depth + (r-1)]
}
result <- try(round(solve(A, b)));
if ("matrix" != class(result)) {
result <- matrix(NA, nrow = depth, ncol = 1);
}
t(result)
}
#x11 <- c(1, 1, 2, 3, 5)
#x12 <- c(1, 3, 7, 17)
#x5 <- c(18, 24, 30, 36, 42, 54)
#solveRecurrent(x5, depth = 2, offset = 3)
isRecurrent <- function(x, depth) {
s <- solveRecurrent(x, depth = depth, offset = 1)
result = TRUE
if (!anyNA(s)) {
for(i in (depth+1):(length(x) - depth)) {
value <- 0
for (j in 1:depth) {
value <- value + x[i+j-1] * s[j]
}
if (is.na(value) | value != x[i+depth]) {
result = FALSE
break;
}
}
}else
result = FALSE
}
#isRecurrent(x11, depth = 2)
#isRecurrent(x12, depth = 2)
train <- read.csv("../input/train.csv", stringsAsFactors = FALSE, nrow = 1000)
sequences <- lapply(strsplit(train$Sequence, split = ","), FUN = as.numeric)
rec2 <- lapply(sequences, isRecurrent, depth = 2)
dim(rec2)
train <- read.csv("../input/train.csv", stringsAsFactors = FALSE, nrow = 1000)
sequences <- lapply(strsplit(train$Sequence, split = ","), FUN = as.numeric)
rec2 <- lapply(sequences, isRecurrent, depth = 2)
isRecurrent <- function(x, depth) {
s <- solveRecurrent(x, depth = depth, offset = 1)
result = TRUE
if (!anyNA(s)) {
for(i in (depth+1):(length(x) - depth)) {
value <- 0
for (j in 1:depth) {
value <- value + x[i+j-1] * s[j]
}
if (value != x[i+depth]) {
result = FALSE
break;
}
}
}else
result = FALSE
}
rec2 <- lapply(sequences, isRecurrent, depth = 2)
isRecurrent <- function(x, depth) {
s <- solveRecurrent(x, depth = depth, offset = 1)
result = TRUE
if (!anyNA(s)) {
for(i in (depth+1):(length(x) - depth)) {
value <- 0
for (j in 1:depth) {
value <- value + x[i+j-1] * s[j]
}
if (is.na(x[i+depth]) | value != x[i+depth]) {
result = FALSE
break;
}
}
}else
result = FALSE
}
rec2 <- lapply(sequences, isRecurrent, depth = 2)
sequences[rec == TRUE]
sequences[rec2 == TRUE]
rec2
isRecurrent <- function(x, depth) {
s <- solveRecurrent(x, depth = depth, offset = 1)
result = TRUE
if (!anyNA(s)) {
for(i in (depth+1):(length(x) - depth)) {
value <- 0
for (j in 1:depth) {
value <- value + x[i+j-1] * s[j]
}
if (is.na(x[i+depth]) || value != x[i+depth]) {
result = FALSE
break;
}
}
}else
result = FALSE
}
isRecurrent <- function(x, depth) {
s <- solveRecurrent(x, depth = depth, offset = 1)
result = TRUE
if (!anyNA(s)) {
for(i in (depth+1):(length(x) - depth)) {
value <- 0
for (j in 1:depth) {
value <- value + x[i+j-1] * s[j]
}
if (is.na(x[i+depth]) || value != x[i+depth]) {
result = FALSE
break;
}
}
}else
result = FALSE
result
}
rec2 <- lapply(sequences, isRecurrent, depth = 2)
?solve
sequences[rec2 == TRUE]
sum(rec2 == TRUE)
sum(rec2 == FALSE)
rec3 <- lapply(sequences, isRecurrent, depth = 3)
sum(rec3 == TRUE)
sequences[rec3 == TRUE]
rec4 <- lapply(sequences, isRecurrent, depth = 4)
sequences[rec4 == TRUE]
sum(rec4 == TRUE)
sum(rec3 == TRUE)
sum(rec2 == TRUE)
train <- read.csv("../input/train.csv", stringsAsFactors = FALSE, nrow = 1000000)
sequences <- lapply(strsplit(train$Sequence, split = ","), FUN = as.numeric)
rec2 <- lapply(sequences, isRecurrent, depth = 2)
sum(rec2 == TRUE)
solveRecurrent <- function(x, depth, offset) {     A <- matrix(0, nrow = depth, ncol = depth)     b <- matrix(0, nrow = depth, ncol = 1)     for (r in 1:depth) {          for (c in 1:depth) {             A[r, c] <- x[offset + (r - 1) + (c-1)]         }         b[r] <- x[offset + depth + (r-1)]      }     result <- try(round(solve(A, b)));     if ("matrix" != class(result)) {         result <- matrix(NA, nrow = depth, ncol = 1);     }     t(result) }
isRecurrent <- function(x, depth) {     s <- solveRecurrent(x, depth = depth, offset = 1)     result = TRUE     if (!anyNA(s)) {       for(i in (depth+1):(length(x) - depth)) {         value <- 0         for (j in 1:depth) {           value <- value + x[i+j-1] * s[j]             }         if (is.na(x[i+depth]) || value != x[i+depth]) {           result = FALSE           break;         }       }     }else       result = FALSE     result }
x11 <- c(1, 1, 2, 3, 5)
isRecurrent(x11, depth = 2)
train <- read.csv("../input/train.csv", stringsAsFactors = FALSE, nrow = 1000000)
sequences <- lapply(strsplit(train$Sequence, split = ","), FUN = as.numeric)
train <- read.csv("../input/train.csv", stringsAsFactors = FALSE, nrow = 1000) sequences <- lapply(strsplit(train$Sequence, split = ","), FUN = as.numeric)
system.time(rec4 <- lapply(sequences, isRecurrent, depth = 4))
train <- read.csv("../input/train.csv", stringsAsFactors = FALSE, nrow = 10000) sequences <- lapply(strsplit(train$Sequence, split = ","), FUN = as.numeric)
system.time(rec4 <- lapply(sequences, isRecurrent, depth = 4))
sum(rec4)
rec4
sum(rec4 == TRUE)
isRecurrent <- function(x, depth) {     s <- solveRecurrent(x, depth = depth, offset = 1)     result = TRUE     if (!anyNA(s)) {       for(i in (depth+1):(length(x) - depth)) {         value <- 0         for (j in 1:depth) {           value <- value + x[i+j-1] * s[j]             }         if (is.na(x[i+depth]) || abs(value - x[i+depth]) < 0.01 ) {           result = FALSE           break;         }       }     }else       result = FALSE     result }
system.time(rec4 <- lapply(sequences, isRecurrent, depth = 4)) # 1.7 on 10000
sum(rec4 == TRUE)
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) testseq <- lapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
length(testseq)
test2 <- lapply(testseq, isRecurrent, depth = 2)
length(test2)
sum(test2 == TRUE)
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$Sequence <- as.numeric(strsplit(test$Sequence, split = ","))
test$Sequence <- lapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
test$Solve2 <- lapply(test$Sequence, FUN = solveRecurrent, depth = 2)
solveRecurrent <- function(x, depth) {     A <- matrix(0, nrow = depth, ncol = depth)     b <- matrix(0, nrow = depth, ncol = 1)     for (r in 1:depth) {          for (c in 1:depth) {             A[r, c] <- x[1 + (r - 1) + (c-1)]         }         b[r] <- x[1 + depth + (r-1)]      }     result <- try(round(solve(A, b)));     if ("matrix" != class(result)) {         result <- matrix(NA, nrow = depth, ncol = 1);     }     t(result) }
test$Solve2 <- lapply(test$Sequence, FUN = solveRecurrent, depth = 2)
head(test$Solve2)
head(test)
test[3]
test[[3]]
test[3,]
str(test[3,])
test$Check2 <- isRecurrent(test$Sequence, 2, test$Solve2)
isRecurrent <- function(x, depth, s) {     result = TRUE     if (!anyNA(s)) {       for(i in (depth+1):(length(x) - depth)) {         value <- 0         for (j in 1:depth) {           value <- value + x[i+j-1] * s[j]             }         if (is.na(x[i+depth]) || abs(value - x[i+depth]) < 0.01 ) {           result = FALSE           break;         }       }     }else       result = FALSE     result }
test$Check2 <- isRecurrent(test$Sequence, 2, test$Solve2)
test$Check2 <- isRecurrent(test$Sequence, 2, test$Solve2)
test$Check2 <- lapply(test$Sequence, FUN = isRecurrent, depth = 2, s = test$Solve2)
test$Check2 <- mapply(isRecurrent, test$Sequence, 2, test$Solve2)
sum(test$Check2 == TRUE)
sum(test$Check2 == FALSE)
head(test, 100)
test[2,]
isRecurrent <- function(x, depth, s) {     result = TRUE     if (!anyNA(s)) {       for(i in (depth+1):(length(x) - depth)) {         value <- 0         for (j in 1:depth) {           value <- value + x[i+j-1] * s[j]             }         if (is.na(x[i+depth]) || abs(value - x[i+depth]) > 0.01 ) {           result = FALSE           break;         }       }     }else       result = FALSE     result }
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$Sequence <- lapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
length(testseq) == 113845
test$Solve2 <- lapply(test$Sequence, FUN = solveRecurrent, depth = 2)
test$Check2 <- mapply(isRecurrent, test$Sequence, 2, test$Solve2)
sum(test$Check2 == TRUE)
sum(test$Check2 == FALSE)
test[test$Check2 == TRUE,]
head(test[test$Check2 == TRUE,])
predictNext <- function(x, depth, s) {     i <- length(x) - depth;     value <- 0     for (j in 1:depth) {         value <- value + x[i + j - 1] * s[j]     }     value }
test[44,]
test[44]$Sequence
test[44,]$Sequence
predictNext(test[44,]$Sequence, 2, test[44,]$Solve2)
test[44,]$Solve2
test[44,]$Solve2[1]
test[44,]$Solve2[2]
class(test[44,]$Solve2)
class(test$     )
class(test$Solve2)
class(test$Solve2[1])
class(test$Solve2[1][1])
class(test$Solve2[1][1][1])
solveRecurrent <- function(x, depth) {     A <- matrix(0, nrow = depth, ncol = depth)     b <- matrix(0, nrow = depth, ncol = 1)     for (r in 1:depth) {          for (c in 1:depth) {             A[r, c] <- x[1 + (r - 1) + (c-1)]         }         b[r] <- x[1 + depth + (r-1)]      }     result <- try(round(solve(A, b)));     if ("matrix" != class(result)) {         result <- matrix(NA, nrow = depth, ncol = 1);     }     t(result)[1,] }
isRecurrent <- function(x, depth, s) {     result = TRUE     if (!anyNA(s)) {       for(i in (depth+1):(length(x) - depth)) {         value <- 0         for (j in 1:depth) {           value <- value + x[i+j-1] * s[j]             }         if (is.na(x[i+depth]) || abs(value - x[i+depth]) > 0.01 ) {           result = FALSE           break;         }       }     }else       result = FALSE     result }
test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000)
test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
test$Solve2 <- lapply(test$Sequence, FUN = solveRecurrent, depth = 2)
test$Check2 <- mapply(isRecurrent, test$Sequence, 2, test$Solve2)
predictNext(test[44,]$Sequence, 2, test[44,]$Solve2)
test[44,]$Solve2
test[44,]$Solve2[1]
test[44,]$Solve2[[1]]
predictNext(test[44,]$Sequence, 2, test[44,]$Solve2[[1]])
predictNext(test[44,]$Sequence[[1]], 2, test[44,]$Solve2[[1]])
test[44,]
predictNext <- function(x, depth, s) {     i <- length(x) - depth + 1;     value <- 0     for (j in 1:depth) {         value <- value + x[i + j - 1] * s[j]     }     value }
predictNext(test[44,]$Sequence[[1]], 2, test[44,]$Solve2[[1]])
test$Predict <- NA
test[test$Check2 == TRUE,]$Predict <- predictNext(test[test$Check2 == TRUE,]$Sequence[[1]], 2, test[test$Check2 == TRUE,]$Solve2[[1]])
test$Predict[!is.na(test$Predict)]
test[test$Check2 == TRUE,]$Predict <- predictNext(test[test$Check2 == TRUE,]$Sequence, 2, test[test$Check2 == TRUE,]$Solve2)
testPredict <- mapply(predictNext, test$Sequence, 2, test$Solve2)
test$Predict[!is.na(test$Predict)]
sum(!is.na(test$Predict))
test[!is.na(test$Predict),]
test$Predict <- mapply(predictNext, test$Sequence, 2, test$Solve2)
test[!is.na(test$Predict),]
test$Predict <- mapply(predictNext, test$Sequence, 2, test$Solve2)
test$Predict <- NA
test$Predict <- mapply(predictNext, test$Sequence, 2, test$Solve2)
sum(!is.na(test$Predict))
sum(!is.na(test$Solve2))
test$Check2 <- mapply(isRecurrent, test$Sequence, 2, test$Solve2, test$Check2)
predictNext <- function(x, depth, s, isRecurrent) {     if (isRecurrent) {         i <- length(x) - depth + 1;         value <- 0         for (j in 1:depth) {             value <- value + x[i + j - 1] * s[j]         }     } else         value <- NA     value }
test$Check2 <- mapply(isRecurrent, test$Sequence, 2, test$Solve2, test$Check2)
test$Predict <- mapply(predictNext, test$Sequence, 2, test$Solve2, test$Check2)
sum(!is.na(test$Solve2))
sum(is.na(test$Solve2))
sum(!is.na(test$Predict))
head(test[test$Check2 == TRUE,])
colnames(test)[2]
colnames(test)[5]
colnames(test)[5] <- "Last"
submit2 <- test[test$Check2 == TRUE, c("Id", "Last")]
length(submit2)
head(submit2)
write.csv(submit2, "../input/recurrent2.csv")
write.csv(submit2, "../output/recurrent2.csv")
colnames(submit2)
colnames(submit2[1])
write.csv(submit2, "../output/recurrent2.csv")
write.csv2(submit2, "../output/recurrent2.csv")
write.csv(submit2, "../output/recurrent2.csv", row.names = FALSE)
test$Last <- mapply(predictNext, test$Sequence, 2, test$Solve2, test$Check2) test$Last <- as.integer(test$Last)
test$Last <- lapply(test$Last, function(x) { if (x < 1E8) as.integer(x) else x } test$Last <- lapply(test$Last, function(x) { if (x < 1E8) as.integer(x) else x }) test$Last <- mapply(predictNext, test$Sequence, 2, test$Solve2, test$Check2) test$Last <- lapply(test$Last, function(x) { if (x < 1E8) as.integer(x) else x })
test$Last <- mapply(predictNext, test$Sequence, 2, test$Solve2, test$Check2)
test$Last <- lapply(test$Last, function(x) { if (x < 1E8) { x = as.integer(x) } x })
test$Last <- lapply(test$Last, function(x) { if (x < 100000000) { x = as.integer(x) } x })
test$Last <- lapply(test$Last, function(x) {      if (x < 100000000)
x = as.integer(x)
x
} )
test$Last <- lapply(test$Last, function(x) {      if (x < 100000000)
x = as.integer(x)
x
})
x <- 1e8
class(x)
as.in
as.integer(x)
class(as.integer(x))
test$Last <- mapply(predictNext, test$Sequence, 2, test$Solve2, test$Check2) test$Last <- lapply(test$Last, function(x) {      y <- try(as.integer(x))
if (class(y) != "integer")
y <- x
y
})
warnings()
test$Last <- mapply(predictNext, test$Sequence, 2, test$Solve2, test$Check2) test$Last <- lapply(test$Last, function(x) {     y <- suppressWarnings(try(as.integer(x)))
if (class(y) != "integer")
y <- x
y
})
submit2 <- test[test$Check2 == TRUE, c("Id", "Last")] write.csv(submit2, "../output/recurrent2.csv", row.names = FALSE)
test$Last <- lapply(test$Last, function(x) {     y <- suppressWarnings(try(as.integer(x)))
if (class(y) != "integer")
y <- x
y
})
submit2 <- test[test$Check2 == TRUE, c("Id", "Last")]
colnames(submit2[1])
colnames(test]) colnames(test) colnames(test) ) colnames(test) }
test$Last <- lapply(test$Last, function(x) {     y <- suppressWarnings(try(as.integer(x)))
if (class(y) != "integer")
y <- x
y
})
test$Last
source("D:\\prj\\Kaggle\\Integer Sequence Learning\\scripts\\Recurrence Equation Solve.R", encoding = "Windows-1252")
submit2 <- test[test$Check2 == TRUE, c("Id", "Last")]
source("D:\\prj\\Kaggle\\Integer Sequence Learning\\scripts\\Recurrence Equation Solve.R", encoding = "Windows-1252")
debugSource('D:/prj/Kaggle/Integer Sequence Learning/scripts/Recurrence Equation Solve.R')
test <- load(file = "../output/temp62.rda")
for (i in 2:62) {
test[[paste("Last", i)]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, i, test[[paste("Solve", i)]], test[[paste("Check", i)]])
}
for (i in 2:62) {
test[[paste("Last", i)]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, i, test[[paste("Solve", i)]], test[[paste("Check", i)]])
}
head(test)
test[1,]
dim(test)
View(test)
rm(test)
load(file = "../output/temp62.rda")
head(test)
for (i in 2:62) {
test[[paste("Last", i)]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, i, test[[paste("Solve", i)]], test[[paste("Check", i)]])
}
dim(test)
dim(test)[1]
rep(i,2)
for (i in 2:62) {
test[[paste("Last", i)]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, rep(i,dim(test)[1]), test[[paste("Solve", i)]], test[[paste("Check", i)]])
}
test[[paste("Last", 2)]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, 2, test$Solve2, test[["Check2"]])
test[[paste("Last", 2)]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, 2, test[["Solve2"]], test[["Check2"]])
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
test[[cLast]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, rep(i,dim(test)[1]), test[[cSolve]], test[[cCheck]])
}
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
depths <- rep(i,dim(test)[1])
test[[cLast]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, depths, test[[cSolve]], test[[cCheck]])
}
test[[paste("Last", 2)]] <- mapply(FUN = predictNext, SIMPLIFY = TRUE, test$Sequence, 2, test[["Solve2"]], test[["Check2"]])
test[[paste("Last", 3)]] <- mapply(FUN = predictNext, SIMPLIFY = TRUE, test$Sequence, 3, test[["Solve3"]], test[["Check3"]])
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
depths <- rep(i,dim(test)[1])
test[[cLast]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, i, test[[cSolve]], test[[cCheck]])
}
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
depths <- rep(i,dim(test)[1])
test[[cLast]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, depths, test[[cSolve]], test[[cCheck]])
}
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
test$depth <- i
test[[cLast]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, test$depth, test[[cSolve]], test[[cCheck]])
}
head(test$depth)
head(test$Sequence)
test[,paste("Last", 2)] <- predictNext(test[,"Sequence"], 2, test[, "Solve3"], test[,"Check3"])
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
test$depth <- i
test[,cLast] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, test$depth, test[,cSolve], test[,cCheck])
}
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
test$depth <- i
test[,cLast] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, test$depth, test[,cSolve], test[,cCheck])
}
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
test$depth <- i
test[,cLast] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, test$depth, test[,cSolve], test[,cCheck])
}
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
test$depth <- i
test[,cLast] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, test$depth, test[,cSolve], test[,cCheck])
}
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
test$depth <- i
test[,cLast] <- mapply(predictNext, SIMPLIFY = TRUE, test[,"Sequence"], test[,"depth"], test[,cSolve], test[,cCheck])
}
debugSource('D:/prj/Kaggle/Integer Sequence Learning/scripts/Recurrence Equation Solve.R')
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
test$depth <- i
test[,cLast] <- mapply(predictNext, SIMPLIFY = TRUE, test[,"Sequence"], test[,"depth"], test[,cSolve], test[,cCheck])
}
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
test$depth <- i
test[,cLast] <- mapply(predictNext, SIMPLIFY = TRUE, test[,"Sequence"], test[,"depth"], test[,cSolve], test[,cCheck])
}
SWIRL()
swirl()
library(swirl)
siwrl()
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
names(pm0)
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
sum(is.na(x0))
mean(is.na(x0))
names(pm2) <- make.names(cnames[[1]][wcol])
wcol
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1)
)
negative <- x1 < 0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
str(dates)
head(dates)
hist(dates[negative], month)
hist(dates[negative], "month")
str(site0)
intersect(site0, site1)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 % country.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 & country.site %in% both)
cnt0 <- subset(pm0, pm0$State.Code == 36 & pm0$country.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(h = median(x0sub))
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE), lwd = 2)
rng <- range(x0sub,x1sub, na.rm = TRUE)
rng
mn0 <- using(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d0
d1 <- data.frame(state = names(mn1), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim(mgr)
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5, 2.5)))
with(mrg, plot(rep(2,52), mrg[,3], xlim = c(.5, 2.5)))
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2,52), mrg[,3], xlim = c(.5, 2.5)))
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1, 52), mrg[,2], re(2, 53), mrg[,3])
segments(rep(1, 52), mrg[,2], rep(2, 53), mrg[,3])
segments(rep(1, 52), mrg[,2], rep(2, 52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y,]
solveRecurrent <- function(x, depth) {     A <- matrix(NA, nrow = depth + 1, ncol = depth + 1, byrow = TRUE)     b <- matrix(NA, nrow = depth + 1, ncol = 1)     for (r in 1:(depth + 1)) {         for (c in 1:depth) {             A[r, c] <- x[1 + (r - 1) + (c - 1)]         }         A[r, depth + 1] <- 1         b[r] <- x[1 + depth + (r - 1)]     }     result <- try(round(solve(A, b)));     if ("matrix" != class(result)) {         result <- matrix(NA, nrow = depth, ncol = 1);     }     t(result)[1,] }
isRecurrent <- function(x, depth, s) {     result = TRUE     if (!anyNA(s)) {         for (i in (depth + 1):(length(x) - depth)) {             value <- 0             for (j in 1:depth) {                 value <- value + x[i + j - 1] * s[j]             }             value <- value + s[j + 1]             if (is.na(x[i + depth]) || abs(value - x[i + depth]) > 0.01) {                 result = FALSE                 break;             }         }     } else         result = FALSE     result }
predictNext <- function(x, depth, s, isRecurrent) {     if (isRecurrent) {         i <- length(x) - depth + 1;         value <- 0         for (j in 1:depth) {             value <- value + x[i + j - 1] * s[j]         }         value <- value + s[depth + 1]     } else         value <- NA     value }
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
test$Solve2 <- lapply(test$Sequence, FUN = solveRecurrent, depth = 2)
test$Check2 <- mapply(isRecurrent, test$Sequence, 2, test$Solve2)
sum(test$Check2 == TRUE )
for (i in 2:2) {     test[[n("Last", i)]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, i, test[[n("Solve", i)]], test[[n("Check", i)]]) }
n <- function(prefix, number) {     paste(prefix, i, sep = "") }
for (i in 2:2) {     test[[n("Last", i)]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, i, test[[n("Solve", i)]], test[[n("Check", i)]]) }
coalesce1a <- function(...) {     ans <- ..1     for (elt in list(...)[-1]) {         i <- which(is.na(ans))         ans[i] <- elt[i]     }     ans }
test$Last <-NA for (cn in sapply(c(2:32), function(x) paste("Last", x, sep = ""))) {     test$Last <- coalesce1a(test$Last, test[[cn]]) }
test$Last <-NA for (cn in sapply(c(2:2), function(x) paste("Last", x, sep = ""))) {     test$Last <- coalesce1a(test$Last, test[[cn]]) }
test$Last
test$Last[is.na(test$Last)] <- 0 # 16936 for 2..62
test$Last[abs(test$Last) < 1E8] <- as.integer(test$Last[abs(test$Last) < 1E8])
write.csv(test[, c("Id", "Last")], "../output/recurrent2-1.csv", row.names = FALSE) 
verify <- function(x, depth, s) {     result <- TRUE     for (i in 1:(length(x) - depth)) {         value <- 0         for (j in 1:depth) {             value <- value + x[i + j - 1] * s[j]         }         value <- value + s[j + 1]         if (is.na(x[i + depth]) || abs(value - x[i + depth]) > abs(value / 1000)) {             result = FALSE             break;         }     }     result }
verified <- mapply(verify, SIMPLIFY = TRUE, test$Sequence, 2, test$Solve2)
verify <- function(x, depth, s) {     result <- TRUE     for (i in 1:(length(x) - depth)) {         value <- 0         for (j in 1:depth) {             value <- value + x[i + j - 1] * s[j]         }         value <- value + s[j + 1]         if (is.na(x[i + depth]) | abs(value - x[i + depth]) > abs(value / 1000)) {             result = FALSE             break;         }     }     result }
verified <- mapply(verify, SIMPLIFY = TRUE, test$Sequence, 2, test$Solve2)
verify <- function(x, depth, s) {     result <- TRUE     for (i in 1:(length(x) - depth)) {         value <- 0         for (j in 1:depth) {             value <- value + x[i + j - 1] * s[j]         }         value <- value + s[j + 1]         if (abs(value - x[i + depth]) > 0.01) {             result = FALSE             break;         }     }     result }
verified <- mapply(verify, SIMPLIFY = TRUE, test$Sequence, 2, test$Solve2)
verified <- mapply(verify, SIMPLIFY = TRUE, test$Sequence, 2, test$Solve2)
[test[test$Id == 224841,] test[test$Id == 224841,]
test$Last[abs(test$Last) < 1E20] <- as.integer(test$Last[abs(test$Last) < 1E20])
test$Last[abs(test$Last) < 1E12] <- as.integer(test$Last[abs(test$Last) < 1E12])
test$Last[is.na(test$Last)] <- 0 # 16936 for 2..62
test$Last[abs(test$Last) < 1E12] <- as.integer(test$Last[abs(test$Last) < 1E12])
test$Last[abs(test$Last) < 1E18] <- as.integer(test$Last[abs(test$Last) < 1E18])
test$Last[abs(test$Last) < 1E20] <- as.integer(test$Last[abs(test$Last) < 1E20])
test$Last[abs(test$Last) < 1E30] <- as.integer(test$Last[abs(test$Last) < 1E30])
test$Last[is.na(test$Last)] <- 0 # 16936 for 2..62
test$Last[abs(test$Last) < 1E24] <- as.integer(test$Last[abs(test$Last) < 1E24])
for (i in 2:2) {     print(paste("---- iteration ", i, " -----"))     test[[n("Solve", i)]] <- lapply(test$Sequence, FUN = solveRecurrent, depth = i)     test[[n("Check", i)]] <- mapply(isRecurrent, test$Sequence, i, test[[n("Solve", i)]])     found <- sum(test[[n("Check", i)]] == TRUE)     print(paste("---- found ", found, " -----"))     if (found == 0) {         maxDepth <- i         break;     } }
        maxDepth <- i
maxDepth
for (i in 2:maxDepth) {     test[[n("Last", i)]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, i, test[[n("Solve", i)]], test[[n("Check", i)]]) }
test[test$Id == 224841,]
test$Last <-NA for (cn in sapply(c(2:maxDepth), function(x) paste("Last", x, sep = ""))) {     test$Last <- coalesce1a(test$Last, test[[cn]]) }
test$Last[is.na(test$Last)] <- 0 
test$Last[abs(test$Last) < 1E24] <- as.integer(test$Last[abs(test$Last) < 1E24])
for (cn in sapply(c(2:maxDepth), function(x) paste("Last", x, sep = ""))) {     test$Last <- coalesce1a(test$Last, test[[cn]]) }
for (cn in sapply(c(2:maxDepth), function(x) paste("Last", x, sep = ""))) {     test$Last <- coalesce1a(test$Last, test[[cn]]) } test$Last[is.na(test$Last)] <- 0 # 16936 for 2..62
test$Last[abs(test$Last) < 1E22] <- as.integer(test$Last[abs(test$Last) < 1E22])
test$Last <-NA for (cn in sapply(c(2:maxDepth), function(x) paste("Last", x, sep = ""))) {     test$Last <- coalesce1a(test$Last, test[[cn]]) } test$Last[is.na(test$Last)] <- 0 # 16936 for 2..62 test$Last[abs(test$Last) < 1E20] <- as.integer(test$Last[abs(test$Last) < 1E20])
test$Last <-NA for (cn in sapply(c(2:maxDepth), function(x) paste("Last", x, sep = ""))) {     test$Last <- coalesce1a(test$Last, test[[cn]]) } test$Last[is.na(test$Last)] <- 0 # 16936 for 2..62 test$Last[abs(test$Last) < 1E18] <- as.integer(test$Last[abs(test$Last) < 1E18])
test$Last <-NA for (cn in sapply(c(2:maxDepth), function(x) paste("Last", x, sep = ""))) {     test$Last <- coalesce1a(test$Last, test[[cn]]) } test$Last[is.na(test$Last)] <- 0 # 16936 for 2..62 test$Last[abs(test$Last) < 1E16] <- as.integer(test$Last[abs(test$Last) < 1E16])
test$Last <-NA for (cn in sapply(c(2:maxDepth), function(x) paste("Last", x, sep = ""))) {     test$Last <- coalesce1a(test$Last, test[[cn]]) } test$Last[is.na(test$Last)] <- 0 # 16936 for 2..62 test$Last[abs(test$Last) < 1E15] <- as.integer(test$Last[abs(test$Last) < 1E15])
test$Last <-NA for (cn in sapply(c(2:maxDepth), function(x) paste("Last", x, sep = ""))) {     test$Last <- coalesce1a(test$Last, test[[cn]]) } test$Last[is.na(test$Last)] <- 0 # 16936 for 2..62 test$Last[abs(test$Last) < 1E12] <- as.integer(test$Last[abs(test$Last) < 1E12])
test$Last <-NA for (cn in sapply(c(2:maxDepth), function(x) paste("Last", x, sep = ""))) {     test$Last <- coalesce1a(test$Last, test[[cn]]) } test$Last[is.na(test$Last)] <- 0 # 16936 for 2..62 test$Last[abs(test$Last) < 1E10] <- as.integer(test$Last[abs(test$Last) < 1E10])
test$Last <-NA for (cn in sapply(c(2:maxDepth), function(x) paste("Last", x, sep = ""))) {     test$Last <- coalesce1a(test$Last, test[[cn]]) } test$Last[is.na(test$Last)] <- 0 # 16936 for 2..62 test$Last[abs(test$Last) < 1E9] <- as.integer(test$Last[abs(test$Last) < 1E9])
test$Last <-NA for (cn in sapply(c(2:maxDepth), function(x) paste("Last", x, sep = ""))) {     test$Last <- coalesce1a(test$Last, test[[cn]]) } test$Last[is.na(test$Last)] <- 0 # 16936 for 2..62
test$Last[abs(test$Last) > 1E10] 
test$Last[abs(test$Last) > 1E8 & abs(test$Last) < 1E9]
test$Last <-NA for (cn in sapply(c(2:maxDepth), function(x) paste("Last", x, sep = ""))) {     test$Last <- coalesce1a(test$Last, test[[cn]]) } test$Last[is.na(test$Last)] <- 0 # 16936 for 2..62 test$Last[abs(test$Last) < 1E9] <- as.integer(test$Last[abs(test$Last) < 1E9]) write.csv(test[, c("Id", "Last")], "../output/recurrent2-1.csv", row.names = FALSE) 
test$Last[abs(test$Last) > 1E9]
test[abs(test$Last) > 1E9]
test[abs(test$Last) > 1E9,]
head(test[abs(test$Last) > 1E9,], 100)
View(head(test[abs(test$Last) > 1E9,], 100))
test$Last2Old <- test$Last2 library(gmp)
install.packages("gmp")
install.packages("gmp")
library(gmp)
library(gmp) predictNext <- function(x, depth, s, isRecurrent) {     if (isRecurrent) {         i <- length(x) - depth + 1;         value <- as.bigz(0)         for (j in 1:depth) {             value <- add.bigz( value, mul.bigz ( as.bigz(x[i + j - 1]), as.bigz(s[j]) ))         }         value <- add.bigz(value, as.bigz(s[depth + 1]))     } else         value <- NA     value }
for (i in 2:maxDepth) {     test[[n("Last", i)]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, i, test[[n("Solve", i)]], test[[n("Check", i)]]) }
library(gmp) predictNext <- function(x, depth, s, isRecurrent) {     if (isRecurrent) {         i <- length(x) - depth + 1;         value <- as.bigz(0)         for (j in 1:depth) {             value <- add.bigz( value, mul.bigz ( as.bigz(x[i + j - 1]), as.bigz(s[j]) ))         }         value <- add.bigz(value, as.bigz(s[depth + 1]))     } else         value <- NA     value }
maxDepth <- 0 for (i in 2:2) {     print(paste("---- iteration ", i, " -----"))     test[[n("Solve", i)]] <- lapply(test$Sequence, FUN = solveRecurrent, depth = i)     test[[n("Check", i)]] <- mapply(isRecurrent, test$Sequence, i, test[[n("Solve", i)]])     found <- sum(test[[n("Check", i)]] == TRUE)     print(paste("---- found ", found, " -----"))     if (found == 0) {         maxDepth <- i         break;     } }
for (i in 2:maxDepth) {     test[[n("Last", i)]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, i, test[[n("Solve", i)]], test[[n("Check", i)]]) }
predictNext <- function(x, depth, s, isRecurrent) {     if (isRecurrent) {         i <- length(x) - depth + 1;         value <- as.bigz(0)         for (j in 1:depth) {             value <- add.bigz( value, mul.bigz ( as.bigz(x[i + j - 1]), as.bigz(s[j]) ))         }         value <- add.bigz(value, as.bigz(s[depth + 1]))     } else         value <- NA     as.character.bigz(value) }
for (i in 2:maxDepth) {     test[[n("Last", i)]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, i, test[[n("Solve", i)]], test[[n("Check", i)]]) }
library(gmp) predictNext <- function(x, depth, s, isRecurrent) {     if (isRecurrent) {         i <- length(x) - depth + 1;         value <- as.bigz(0)         for (j in 1:depth) {             value <- add.bigz( value, mul.bigz ( as.bigz(x[i + j - 1]), as.bigz(s[j]) ))         }         value <- add.bigz(value, as.bigz(s[depth + 1]))     } else         value <- NA     as.character(value) }
for (i in 2:maxDepth) {     test[[n("Last", i)]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, i, test[[n("Solve", i)]], test[[n("Check", i)]]) }
maxDepth
maxDepth <- 2
for (i in 2:maxDepth) {     test[[n("Last", i)]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, i, test[[n("Solve", i)]], test[[n("Check", i)]]) }
test[test$las]
head(test[test$last2 > 1e10])
head(test[test$last2 > 1e10,])
head(test[test$Last2 > 1e10,])
head(test[test$Last2 > 1e10,])test$Last <-NA
for (cn in sapply(c(2:maxDepth), function(x) paste("Last", x, sep = ""))) {     test$Last <- coalesce1a(test$Last, test[[cn]]) }
test$Last[is.na(test$Last)] <- 0 
head(test[test$last > 1e10,])
head(test[test$Last > 1e10,])
write.csv(test[, c("Id", "Last")], "../output/recurrent2-1.csv", row.names = FALSE) 
test$Last <- as.character(test$Last)
write.csv(test[, c("Id", "Last")], "../output/recurrent2-1.csv", row.names = FALSE) 
test$Last2[!is.na(test$Last2)]
test$Last[!is.na(test$Last)]
test$Last <-NA
for (cn in sapply(c(2:maxDepth), function(x) paste("Last", x, sep = ""))) {     test$Last <- coalesce1a(test$Last, test[[cn]]) }
test$Last[!is.na(test$Last)]
test$Last[is.na(test$Last)] <- as.bigz(0)
big0 <- as.bigz(0)
test$Last[is.na(test$Last)] <- big0
test$Last[is.na(test$Last)] <- 0
test$Last[!is.na(test$Last)]
test$Last[test$Last != 0]
write.csv(test[, c("Id", "Last")], "../output/recurrent2-1.csv", row.names = FALSE) 
test[test$id == 3330,]
test[test$Id == 3330,]
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz)
for (i in 2:2) {     print(paste("---- iteration ", i, " -----"))     test[[n("Solve", i)]] <- lapply(test$Sequence, FUN = solveRecurrent, depth = i)     test[[n("Check", i)]] <- mapply(isRecurrent, test$Sequence, i, test[[n("Solve", i)]])     found <- sum(test[[n("Check", i)]] == TRUE)     print(paste("---- found ", found, " -----"))     if (found == 0) {         maxDepth <- i         break;     } }
solveRecurrent <- function(x, depth) {     A <- matrix(NA, nrow = depth + 1, ncol = depth + 1, byrow = TRUE)     b <- matrix(NA, nrow = depth + 1, ncol = 1)     for (r in 1:(depth + 1)) {         for (c in 1:depth) {             A[r, c] <- as.numeric([1 + (r - 1) + (c - 1)])         }         A[r, depth + 1] <- 1         b[r] <- as.numeric(x[1 + depth + (r - 1)])     }     result <- try(round(solve(A, b)));     if ("matrix" != class(result)) {         result <- matrix(NA, nrow = depth, ncol = 1);     }     t(result)[1,] } for (i in 2:2) {     print(paste("---- iteration ", i, " -----"))     test[[n("Solve", i)]] <- lapply(test$Sequence, FUN = solveRecurrent, depth = i)     test[[n("Check", i)]] <- mapply(isRecurrent, test$Sequence, i, test[[n("Solve", i)]])     found <- sum(test[[n("Check", i)]] == TRUE)     print(paste("---- found ", found, " -----"))     if (found == 0) {         maxDepth <- i         break;     } } for (i in 2:2) {     print(paste("---- iteration ", i, " -----"))     test[[n("Solve", i)]] <- lapply(test$Sequence, FUN = solveRecurrent, depth = i)     test[[n("Check", i)]] <- mapply(isRecurrent, test$Sequence, i, test[[n("Solve", i)]])     found <- sum(test[[n("Check", i)]] == TRUE)     print(paste("---- found ", found, " -----"))     if (found == 0) {         maxDepth <- i         break;     } } maxDepth ) }}
for (i in 2:2) {     print(paste("---- iteration ", i, " -----"))     test[[n("Solve", i)]] <- lapply(test$Sequence, FUN = solveRecurrent, depth = i)     test[[n("Check", i)]] <- mapply(isRecurrent, test$Sequence, i, test[[n("Solve", i)]])     found <- sum(test[[n("Check", i)]] == TRUE)     print(paste("---- found ", found, " -----"))     if (found == 0) {         maxDepth <- i         break;     } }
solveRecurrent <- function(x, depth) {     A <- matrix(NA, nrow = depth + 1, ncol = depth + 1, byrow = TRUE)     b <- matrix(NA, nrow = depth + 1, ncol = 1)     for (r in 1:(depth + 1)) {         for (c in 1:depth) {             A[r, c] <- as.numeric(x[1 + (r - 1) + (c - 1)])         }         A[r, depth + 1] <- 1         b[r] <- as.numeric(x[1 + depth + (r - 1)])     }     result <- try(round(solve(A, b)));     if ("matrix" != class(result)) {         result <- matrix(NA, nrow = depth, ncol = 1);     }     t(result)[1,] }
for (i in 2:2) {     print(paste("---- iteration ", i, " -----"))     test[[n("Solve", i)]] <- lapply(test$Sequence, FUN = solveRecurrent, depth = i)     test[[n("Check", i)]] <- mapply(isRecurrent, test$Sequence, i, test[[n("Solve", i)]])     found <- sum(test[[n("Check", i)]] == TRUE)     print(paste("---- found ", found, " -----"))     if (found == 0) {         maxDepth <- i         break;     } }
maxDepth
for (i in 2:maxDepth) {     test[[n("Last", i)]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, i, test[[n("Solve", i)]], test[[n("Check", i)]]) }
test$Last <-NA for (cn in sapply(c(2:maxDepth), function(x) paste("Last", x, sep = ""))) {     test$Last <- coalesce1a(test$Last, test[[cn]]) }
test$Last[is.na(test$Last)] <- 0 # 16936 for 2..62
write.csv(test[, c("Id", "Last")], "../output/recurrent2-1.csv", row.names = FALSE) 
head(test[test$Last != 0,])
sum(test[test$Last != 0,])
sum(test[test$Last != 0])
count(test[test$Last != 0])
length(test[test$Last != 0])
sum(test$Last != 0)
test[test$Id == 3330,]
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Recurrence Equation Solve.R", encoding = "Windows-1252")
isRecurrent <- function(x, depth, s) {     result = TRUE     if (!anyNA(s)) {         for (i in (depth + 1):(length(x) - depth)) {             value <- as.bigz(0)             for (j in 1:depth) {                 value <- add.bigz(value, mul.bigz(as.bigz(x[i + j - 1]), as.bigz(s[j])))             }             value <- add.bigz(value, as.bigz(s[j + 1]))             if (value != as.bigz(x[i + depth])) {                 result = FALSE                 break;             }         }     } else         result = FALSE     result }
maxDepth <- limitDepth for (i in 2:limitDepth) {     print(paste("---- iteration ", i, " -----"))     test[[n("Solve", i)]] <- lapply(test$Sequence, FUN = solveRecurrent, depth = i)     test[[n("Check", i)]] <- mapply(isRecurrent, test$Sequence, i, test[[n("Solve", i)]])     found <- sum(test[[n("Check", i)]] == TRUE)     print(paste("---- found ", found, " -----"))     if (found == 0) {         maxDepth <- i         break;     } }
 sum(test$Check2 == TRUE)
test$Check2
test
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Recurrence Equation Solve.R", encoding = "Windows-1252")
sum(test$Check2 == TRUE)
m = matrix(c(0, 1, 3, 17, 75, 361, 1683, 7937, 37275), nrow = 3, ncol = 3, by )
m = matrix(c(0, 1, 3, 17, 75, 361, 1683, 7937, 37275), nrow = 3, ncol = 3, byrow = TRUE )
m
m = matrix(c(0, 1, 3, 1, 3, 17,  3, 17, 75), nrow = 3, ncol = 3, byrow = TRUE )
solve(m)
qr.solve
qr.solve(m)
m = matrix(c(1, 3, 17,  3, 17, 75, 17, 75, 361), nrow = 3, ncol = 3, byrow = TRUE )
qr.solve(m)
det(m)
v <- c(0, 1, 3, 17, 75, 361, 1683, 7937, 37275, 175321, 824163)
diff(v)
diff(diff(v))
diff(diff(diff(v)))
m2 = matrix(c(0, 1, 1, 3), nrow = 2, ncol = 2, byrow = TRUE)
solve(m2)
qr.solve(m2, c(3, 17))
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000)
test <- subse
test <- subset(test, Id == "90")
dim(test)
test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz)
library(gmp)
test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz)
limitDepth <- 2
n <- function(prefix, number) {     paste(prefix, i, sep = "") }
maxDepth <- limitDepth for (i in 1:limitDepth) {     print(paste("---- iteration ", i, " -----"))     test[[n("Solve", i)]] <- lapply(test$Sequence, FUN = solveRecurrent, depth = i)     test[[n("Check", i)]] <- mapply(isRecurrent, test$Sequence, i, test[[n("Solve", i)]])     found <- sum(test[[n("Check", i)]] == TRUE)     print(paste("---- found ", found, " -----"))     if (found == 0) {         maxDepth <- i         break;     } }
solveRecurrent <- function(x, depth) {     A <- matrix(NA, nrow = depth + 1, ncol = depth + 1, byrow = TRUE)     b <- matrix(NA, nrow = depth + 1, ncol = 1)     for (r in 1:(depth + 1)) {         for (c in 1:depth) {             A[r, c] <- as.numeric(x[1 + (r - 1) + (c - 1)])         }         A[r, depth + 1] <- 1         b[r] <- as.numeric(x[1 + depth + (r - 1)])     }     result <- try(round(solve(A, b)));     if ("matrix" != class(result)) {         result <- matrix(NA, nrow = depth, ncol = 1);     }     t(result)[1,] }
isRecurrent <- function(x, depth, s) {     result = TRUE     if (!anyNA(s)) {         for (i in (depth + 1):(length(x) - depth)) {             value <- as.bigz(0)             for (j in 1:depth) {                 value <- add.bigz(value, mul.bigz(as.bigz(x[i + j - 1]), as.bigz(s[j])))             }             value <- add.bigz(value, as.bigz(s[j + 1]))             if (value != as.bigz(x[i + depth])) {                 result = FALSE                 break;             }         }     } else         result = FALSE     result }
maxDepth <- limitDepth for (i in 1:limitDepth) {     print(paste("---- iteration ", i, " -----"))     test[[n("Solve", i)]] <- lapply(test$Sequence, FUN = solveRecurrent, depth = i)     test[[n("Check", i)]] <- mapply(isRecurrent, test$Sequence, i, test[[n("Solve", i)]])     found <- sum(test[[n("Check", i)]] == TRUE)     print(paste("---- found ", found, " -----"))     if (found == 0) {         maxDepth <- i         break;     } }
limitDepth <- 2
limitDepth
maxDepth <- limitDepth for (i in 1:limitDepth) {     print(paste("---- iteration ", i, " -----"))     test[[n("Solve", i)]] <- lapply(test$Sequence, FUN = solveRecurrent, depth = i)     test[[n("Check", i)]] <- mapply(isRecurrent, test$Sequence, i, test[[n("Solve", i)]])     found <- sum(test[[n("Check", i)]] == TRUE)     print(paste("---- found ", found, " -----"))     if (found == 0) {         maxDepth <- i         break;     } }
for (i in 2:limitDepth) {     print(paste("---- iteration ", i, " -----"))     test[[n("Solve", i)]] <- lapply(test$Sequence, FUN = solveRecurrent, depth = i)     test[[n("Check", i)]] <- mapply(isRecurrent, test$Sequence, i, test[[n("Solve", i)]])     found <- sum(test[[n("Check", i)]] == TRUE)     print(paste("---- found ", found, " -----"))     if (found == 0) {         maxDepth <- i         break;     } }
test
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000)
test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz)
limitDepth <- 2
maxDepth <- limitDepth for (i in 1:limitDepth) {     print(paste("---- iteration ", i, " -----"))     test[[n("Solve", i)]] <- lapply(test$Sequence, FUN = solveRecurrent, depth = i)     test[[n("Check", i)]] <- mapply(isRecurrent, test$Sequence, i, test[[n("Solve", i)]])     found <- sum(test[[n("Check", i)]] == TRUE)     print(paste("---- found ", found, " -----"))     if (found == 0) {         maxDepth <- i         break;     } }
maxDepth <- limitDepth for (i in 1:limitDepth) {     print(paste("---- iteration ", i, " -----"))     for (j in 1:length(test$id)) {             if (!is.null(test[[n("Check", i - 1)]][j])) {                  test[[n("Solve", i)]][j] <- solveRecurrent(test$Sequence[j], depth = i)                 test[[n("Check", i)]][j] <- isRecurrent(test$Sequence[j], i, test[[n("Solve", i)]][j])         }
    }     found <- sum(test[[n("Check", i)]] == TRUE)     print(paste("---- found ", found, " -----"))     if (found == 0) {         maxDepth <- i         break;     } }
for (i in 1:limitDepth) {     print(paste("---- iteration ", i, " -----"))     for (j in 1:length(test$Id)) {             if (!is.null(test[[n("Check", i - 1)]][j])) {                  test[[n("Solve", i)]][j] <- solveRecurrent(test$Sequence[j], depth = i)                 test[[n("Check", i)]][j] <- isRecurrent(test$Sequence[j], i, test[[n("Solve", i)]][j])         }
    }     found <- sum(test[[n("Check", i)]] == TRUE)     print(paste("---- found ", found, " -----"))     if (found == 0) {         maxDepth <- i         break;     } }
length(test$Id)
for (i in 1:limitDepth) { }
test[[n("Check", i - 1)]][j]))
test[[n("Check", i - 1)]][j]
is.null(test[[n("Check", i - 1)]][j])
maxDepth <- limitDepth for (i in 1:limitDepth) {     print(paste("---- iteration ", i, " -----"))     for (j in 1:length(test$Id)) {         if (is.null(test[[n("Check", i - 1)]][j]) & test[[n("Check", i - 1)]][j]) {                 test[[n("Solve", i)]][j] <- solveRecurrent(test$Sequence[j], depth = i)                 test[[n("Check", i)]][j] <- isRecurrent(test$Sequence[j], i, test[[n("Solve", i)]][j])         }
    }     found <- sum(test[[n("Check", i)]] == TRUE)     print(paste("---- found ", found, " -----"))     if (found == 0) {         maxDepth <- i         break;     } }
maxDepth <- limitDepth for (i in 1:limitDepth) {     print(paste("---- iteration ", i, " -----"))     for (j in 1:length(test$Id)) {         if (is.null(test[[n("Check", i - 1)]][j]) | test[[n("Check", i - 1)]][j] == FALSE) {                 test[[n("Solve", i)]][j] <- solveRecurrent(test$Sequence[j], depth = i)                 test[[n("Check", i)]][j] <- isRecurrent(test$Sequence[j], i, test[[n("Solve", i)]][j])         }
    }     found <- sum(test[[n("Check", i)]] == TRUE)     print(paste("---- found ", found, " -----"))     if (found == 0) {         maxDepth <- i         break;     } }
maxDepth <- limitDepth for (i in 1:limitDepth) {     print(paste("---- iteration ", i, " -----"))     for (j in 1:length(test$Id)) {         if (is.null(test[[n("Check", i - 1)]][j]) | (test[[n("Check", i - 1)]][j] == FALSE)) {                 test[[n("Solve", i)]][j] <- solveRecurrent(test$Sequence[j], depth = i)                 test[[n("Check", i)]][j] <- isRecurrent(test$Sequence[j], i, test[[n("Solve", i)]][j])         }
    }     found <- sum(test[[n("Check", i)]] == TRUE)     print(paste("---- found ", found, " -----"))     if (found == 0) {         maxDepth <- i         break;     } }
is.null(test[[n("Check", i - 1)]][j]) | (test[[n("Check", i - 1)]][j] == FALSE)
i = 2
j = 1
i <- 2
j <- 1
is.null(test[[n("Check", i - 1)]][j]) | (test[[n("Check", i - 1)]][j] == FALSE)
is.null(test[[n("Check", i - 1)]][j]) || (test[[n("Check", i - 1)]][j] == FALSE)
solveRecurrent(test$Sequence[j], depth = i)
test$Sequence[j]
solveRecurrent(unlist(test$Sequence[j]), depth = i)
maxDepth <- limitDepth for (i in 1:limitDepth) {     print(paste("---- iteration ", i, " -----"))     for (j in 1:length(test$Id)) {         if (is.null(test[[n("Check", i - 1)]][j]) || (test[[n("Check", i - 1)]][j] == FALSE)) {                 test[[n("Solve", i)]][j] <- solveRecurrent(unlist(test$Sequence[j]), depth = i)                 test[[n("Check", i)]][j] <- isRecurrent(test$Sequence[j], i, test[[n("Solve", i)]][j])         }
    }     found <- sum(test[[n("Check", i)]] == TRUE)     print(paste("---- found ", found, " -----"))     if (found == 0) {         maxDepth <- i         break;     } }
maxDepth <- limitDepth for (i in 1:limitDepth) {     print(paste("---- iteration ", i, " -----"))     test[[n("Solve", i)]] <- lapply(test$Sequence, FUN = solveRecurrent, depth = i)     test[[n("Check", i)]] <- mapply(isRecurrent, test$Sequence, i, test[[n("Solve", i)]])     found <- sum(test[[n("Check", i)]] == TRUE)     print(paste("---- found ", found, " -----"))     if (found == 0) {         maxDepth <- i         break;     } }
rec2 <- c(100014, 10007, 100606, 100988, 101594, 101607, 101655, 101887, 102031, 102108, 102716, 10281, 102818, 102859, 102945, 103028, 103072, 10318, 103622, 103647, 103695, 103703, 103832, 103893, 103953, 104156, 104201, 104658, 104895, 10514, 105300, 105485, 105678, 106214, 106275, 10759, 107676, 107846, 108176, 108703, 108915, 109008, 109315, 109382, 109390, 109675, 109982, 110239, 110419, 110622, 11111, 11112, 111139, 111232, 111530, 111702, 111794, 112017, 112219, 11230, 112524, 112598, 112644, 112723, 112766, 113124, 113146, 11363, 113779, 114424, 11445, 114503, 114790, 115340, 115352, 115400, 115949, 115953, 116280, 116465, 116505, 116802, 116809, 11689, 117203, 117476, 117487, 117862, 118028, 11822, 11824, 118548, 118646, 118765, 119008, 119073, 11926, 119543, 119841, 11992, 120159, 120262, 120398, 120600, 120792, 121090, 121177, 121223, 121442, 12151, 121517, 121557, 121873, 121987, 122026, 122076, 122229, 122380, 122621, 122651, 122692, 122718, 122723, 122737, 122763, 122870, 123205, 123431, 123722, 123860, 124394, 124559, 124793, 124798, 125039, 125099, 125156, 125202, 125502, 12553, 125676, 125709, 125843, 125906, 126159, 126213, 126217, 126220, 126444, 12649, 126739, 126778, 126794, 126942, 127265, 127470, 127805, 128013, 128033, 128049, 128060, 128104, 128208, 128263, 128390, 12892, 129006, 129008, 12921, 12930, 12933, 129535, 129987, 130024, 130031, 13019, 130473, 13049, 130739, 130840, 131836, 132003, 132008, 132342, 132614, 132814, 133094, 133128, 133223, 133605, 133851, 13411, 134119, 134243, 135102, 135157, 135360, 135847, 135977, 136003, 136260, 13647, 136951, 136980, 137204, 137603, 137689, 137697, 137947, 137965, 1386, 138767, 138933, 139039, 139051, 139291, 139610, 139691, 139737, 139760, 139956, 140385, 140459, 140839, 140875, 141044, 141090, 141288, 1416, 141871, 142067, 142134, 142305, 142352, 142381, 142560, 143218, 144084, 144247, 144299, 144345, 144419, 144630, 144875, 144899, 145015, 145151, 145428, 145498, 145592, 145771, 145981, 146232, 146239, 146299, 146629, 146833, 146848, 146870, 146990, 147265, 147566, 147807, 147814, 148182, 14825, 148290, 148400, 148724, 148982, 149030, 149327, 149481, 149536, 150073, 150742, 151003, 151043, 151106, 151368, 151666, 15178, 152079, 152120, 152144, 15240, 152441, 152515, 152560, 152726, 152830, 152988, 153100, 153200, 153244, 153420, 153607, 153622, 154057, 154414, 154439, 154757, 154896, 155037, 155448, 155721, 156380, 156667, 156693, 157071, 157087, 157161, 15729, 157301, 157605, 157620, 158231, 158481, 158550, 158709, 159268, 159420, 159449, 15960, 159723, 160251, 160339, 160391, 160440, 160580, 160702, 160714, 160921, 160927, 160965, 16137, 161407, 161534, 161821, 161894, 162044, 162171, 162376, 162411, 162507, 162512, 162559, 163163, 163237, 163379, 163456, 163610, 163728, 164190, 164216, 164295, 164648, 165105, 16519, 165372, 165701, 165742, 165918, 165919, 166107, 166379, 166532, 166804, 167451, 167599, 167667, 167727, 168761, 169344, 169433, 169705, 169723, 170412, 170651, 170991, 171158, 171475, 171621, 172082, 172125, 172549, 172581, 172654, 173231, 173407, 173476, 173727, 173743, 174027, 174455, 174903, 175244, 175431, 175457, 175459, 176210, 176302, 176532, 176674, 176738, 176860, 176945, 177108, 177151, 177155, 177236, 177342, 177369, 17824, 178499, 178503, 178761, 178795, 179171, 179238, 179314, 179547, 180365, 18053, 180574, 180588, 181933, 182159, 182160, 182264, 182272, 182367, 182387, 182840, 182931, 183115, 183668, 183702, 183812, 183855, 184131, 184346, 184436, 184721, 184843, 184857, 185013, 185292, 185591, 186737, 186780, 186919, 187525, 187687, 187864, 18824, 188257, 189171, 189220, 189312, 189671, 189693, 190575, 190599, 190643, 190717, 190865, 190914, 190999, 191308, 191735, 191952, 192068, 192131, 192240, 192265, 192475, 192688, 192790, 192918, 193083, 193380, 194024, 194053, 194136, 194523, 194621, 194665, 194688, 194871, 195028, 195618, 195872, 196086, 196209, 196212, 196525, 196660, 197056, 197334, 197430, 197525, 197672, 197831, 197842, 197878, 197904, 198132, 198262, 198307, 198730, 198788, 198977, 198979, 199101, 19915, 19931, 199354, 199359, 199591, 199773, 20007, 200367, 200536, 200926, 200930, 201150, 201700, 201823, 201907, 201988, 202001, 202029, 202404, 202516, 202868, 203108, 203216, 203344, 203392, 203633, 203891, 203892, 204104, 204173, 204323, 204539, 204802, 204834, 204849, 205258, 205482, 205749, 205923, 206161, 206339, 206367, 206915, 207022, 207214, 207350, 207404, 207674, 207839, 207841, 208063, 208625, 208819, 208842, 209215, 209295, 209692, 209719, 209922, 210079, 2104, 210675, 210787, 21145, 21154, 211840, 211883, 211937, 212116, 212236, 212389, 212701, 212762, 212939, 212997, 21304, 213255, 213386, 213533, 213783, 213849, 213885, 213959, 214471, 214545, 214669, 214869, 215169, 215201, 215313, 215350, 215571, 215744, 215754, 215771, 215872, 215982, 21607, 216120, 216159, 216177, 216965, 217624, 217646, 217681, 218131, 218157, 218593, 219053, 219182, 219207, 219835, 220026, 220059, 220132, 220157, 220732, 221025, 221113, 221148, 221166, 221197, 22173, 22182, 221850, 221897, 221909, 222010, 22207, 223020, 223126, 223162, 223187, 223379, 223438, 223810, 224034, 224150, 224155, 224205, 224347, 224623, 225127, 225248, 225751, 225777, 22585, 22588, 226037, 226257, 22634, 227056, 227382, 227507, 227639, 22798, 22955, 23059, 23090, 23171, 23399, 23665, 23854, 23863, 23881, 25029, 25094, 25305, 25372, 25413, 2550, 25673, 2592, 26031, 26067, 2622, 26395, 26812, 27037, 27459, 27700, 27801, 27965, 28118, 2835, 28462, 2847, 28603, 28699, 28849, 29309, 29654, 29683, 29753, 29828, 29860, 30479, 30968, 31291, 31303, 31422, 31686, 31826, 32151, 3233, 32486, 34523, 34537, 34855, 35334, 35780, 3600, 36077, 36156, 36414, 36730, 37272, 37528, 37588, 37881, 38218, 3825, 38493, 38535, 38581, 38755, 3916, 39247, 39413, 39445, 40034, 40052, 40166, 40469, 40506, 40565, 4064, 40663, 40979, 41200, 4147, 4201, 42124, 42266, 42524, 42530, 42581, 42783, 4279, 4320, 43284, 433, 43432, 43468, 43514, 43753, 43880, 43973, 44276, 44425, 44547, 44949, 44950, 44953, 44965, 45001, 45012, 4508, 45087, 45263, 45460, 46016, 46845, 47068, 47072, 47242, 4768, 48022, 48121, 48194, 48358, 48416, 48468, 48877, 48977, 49034, 49419, 49531, 49679, 49935, 50039, 50040, 50295, 50362, 50632, 51075, 5135, 51476, 51529, 51644, 51954, 52115, 52260, 52300, 52444, 52476, 52486, 52801, 529, 5302, 53053, 53063, 53141, 53143, 5315, 53181, 53223, 53433, 53682, 54022, 54764, 548, 54867, 55146, 55309, 55474, 55557, 55581, 5700, 5724, 57310, 57439, 57819, 57840, 57902, 5800, 58140, 58602, 58636, 58638, 58660, 59119, 59318, 59342, 59483, 59537, 59842, 59876, 60415, 60674, 60842, 6102, 61077, 61292, 61547, 61557, 61750, 61799, 61940, 61946, 62049, 6210, 6219, 62345, 62504, 62590, 62642, 62711, 63007, 63124, 63395, 64047, 64062, 64065, 64395, 64403, 6451, 64797, 65006, 65985, 66164, 66179, 67523, 67544, 67724, 67740, 6793, 68122, 68151, 68215, 68479, 68527, 68696, 68969, 6906, 69104, 69289, 69312, 6941, 69854, 70574, 70783, 70919, 70944, 71003, 71098, 71310, 71593, 71861, 71924, 72411, 72530, 72758, 72833, 72973, 73103, 73223, 73269, 73302, 73340, 73733, 73845, 74006, 74277, 74457, 74815, 7519, 7534, 75366, 75755, 75768, 77440, 77595, 77601, 77920, 78347, 78579, 78696, 7931, 79490, 79661, 79710, 79863, 79936, 80037, 8006, 80147, 80880, 80980, 81134, 81331, 81817, 81951, 82873, 82890, 82926, 83204, 83260, 83394, 83435, 83583, 8406, 84100, 84177, 84240, 8437, 84408, 84628, 84673, 84739, 85144, 85206, 85278, 85446, 85513, 85936, 85965, 85970, 86328, 86389, 86451, 86524, 87098, 87196, 87617, 87708, 87867, 8855, 88628, 88732, 8874, 88780, 88891, 88994, 89474, 89605, 89622, 89837, 89885, 90, 90275, 90730, 90972, 9106, 91148, 91195, 9131, 91548, 9176, 91847, 92043, 92046, 92216, 92289, 92695, 92816, 92831, 93021, 93309, 93316, 93411, 94622, 94710, 95200, 95210, 95482, 95596, 95809, 95906, 95976, 96157, 96206, 9623, 96231, 96375, 96396, 96471, 96622, 97412, 97441, 97495, 97916, 97935, 98013, 98493, 99319, 99722, 99771)
tes
test2 <- test[test$Check2 == FALSE && not (test$Id %in% rec2),]
test2 <- test[test$Check2 == FALSE && ! (test$Id %in% rec2),]
dim(test)
test$Inrec2 <- test$Id %in% rec2
sum(test$Inrec2)
sum(test$Check2==FALSE)
sum(test$Check2==FALSE && test$inre)
sum(test$Check2==FALSE && test$Inrec2)
sum((test$Check2==FALSE) & (test$Inrec2 == TRUE))
test[test$Check2 == FALSE) & (test$Inrec2 == TRUE),] test[(test$Check2 == FALSE) & (test$Inrec2 == TRUE),] ) ] }
test[(test$Check2 == FALSE) & (test$Inrec2 == TRUE),]
head(test[(test$Check2 == FALSE) & (test$Inrec2 == TRUE),])
head(test[(test$Check1 == FALSE) & (test$Check2 == FALSE) & (test$Inrec2 == TRUE),])
sum((test$Check1 == FALSE) & (test$Check2 == FALSE) & (test$Inrec2 == TRUE))
head(test[(test$Check1 == FALSE) & (test$Check2 == FALSE) & (test$Inrec2 == TRUE),])
c(1, 2, 7, 16, 29, 46)
diff(c(1, 2, 7, 16, 29, 46))
diff(diff(c(1, 2, 7, 16, 29, 46)))
t <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000)
t$Sequence <- sapply(strsplit(t$Sequence, split = ","), FUN = as.numeric)
library(inline)
library(inline) library(Rcpp)
fast_equal = cxxfunction(signature(x = 'numeric', y = 'numeric'), '   NumericVector var(x);   double precision = as<double>(y);   for (int i = 0, size = var.size(); i < size; ++i) {     if (var[i] - var[0] > precision || var[0] - var[i] > precision)       return Rcpp::wrap(false);   }   return Rcpp::wrap(true); ', plugin = 'Rcpp')
equals <- function(x) { diff(range(x)) < .Machine$double.eps ^ 0.5 }
s1 <- c(0, 1, 3, 17, 75, 361, 1683, 7937, 37275, 175321, 824163, 3875057, 18218475, 85655881, 402715443, 1893393377, 8901903675, 41852858041, 196773803523, 925144274897, 4349623252875) # 20450023957801
diff(s1)
as.integer(diff(s1))
as.string(diff(s1))
as.character(diff(s1))
as.character(diff(diff(s1)))
as.character(diff(diff(diff(s1))))
as.character(diff(diff(diff(diff(s1)))))
?diff
ratio <- function(x) {     result <- vector(mode = "numeric", length = length(x) - 1)     for (i in 1:length(x) - 1)         result[i] <- x[i+1] / x[i] }
as.character(ratio(x))
as.character(ratio(s1))
ratio(s1)
ratio <- function(x) {     result <- vector(mode = "numeric", length = length(x) - 1)     for (i in 1:length(x) - 1)         result[i] <- x[i + 1] / x[i]     result }
ratio(s1)
ratio(ratio(s1))
s1[-1]
s1[-1]
head(test)
ratio2 <- function(x) {     result <- vector(mode = "numeric", length = length(x) - 1)     for (i in 1:length(x) - 1)         result[i] <- x[i + 1] / x[i-1]     result }
ratio2(s1)
ratio2 <- function(x) {     result <- vector(mode = "numeric", length = length(x) - 1)     for (i in 2:length(x) - 1)         result[i] <- x[i + 1] / x[i-1]     result }
ratio2(s1)
ratio2 <- function(x) {     result <- vector(mode = "numeric", length = length(x) - 1)     for (i in 2:(length(x) - 1))         result[i] <- x[i + 1] / x[i-1]     result }
ratio2(s1)
ratio(s1)
ratio2(s1)
test$ratio2 <- lapply(test$Sequence, function(x) {     r1 = x[length(x)] / x[length(x - 1)]     r2 = x[length(x - 1)] / x[length(x)]
    r1 / r2
})
test$ratio2 <- lapply(test$Sequence, function(x) {     r1 = x[length(x)] / x[length(x - 1)]     r2 = x[length(x - 1)] / x[length(x-2)]
    r1 / r2
})
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000)
test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
test$ratio2 <- lapply(test$Sequence, function(x) {     r1 = x[length(x)] / x[length(x - 1)]     r2 = x[length(x - 1)] / x[length(x-2)]
    r1 / r2
})
test$ratio2
head(test$ratio2)
test$Sequence[1]
x <- test$Sequence[1]
    r1 = x[length(x)] / x[length(x - 1)]     r2 = x[length(x - 1)] / x[length(x-2)]
    r1 / r2
    r1 = x[length(x)] / x[length(x - 1)]
length(x)
x[length(x)]
x <- unlist(test$Sequence[1])
x[length(x)] / x[length(x - 1)]
x[length(x)]
test$ratio2 <- lapply(test$Sequence, function(x) {     r1 = x[length(x)] / x[length(x) - 1]     r2 = x[length(x)- 1] / x[length(x)-2]
    r1 / r2
})
head(test$ratio2)
sum( abs(test$ratio2 - 1) < 0.01)
abs(test$ratio2 - 1) < 0.01
r <- head(test$ratio2)
sum( abs(r - 1) < 0.01)
abs(r - 1)
r - 1
r
test$ratio2 <- lapply(test$Sequence, function(x) {     r1 = x[length(x)] / x[length(x) - 1]     r2 = x[length(x)- 1] / x[length(x)-2]
    r1 / r2 - 1
})
sum( abs(r) < 0.01)
r <- head(test$ratio2)
sum( abs(r) < 0.01)
abs(r)
r <- head(test$ratio2)
r
r <- unlist(head(test$ratio2))
sum( abs(r) < 0.01)
sum(abs(unlist(test$ratio2)) < 0.01)
sum(abs(unlist(test$ratio2)) < 0.01, na.rm = TRUE)
dim(test)
ratio(s1)
