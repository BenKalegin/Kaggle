train <- read.csv("../input/train.csv", stringsAsFactors = FALSE)
train <- read.csv("../input/train.csv", stringsAsFactors = FALSE)
sequences <- strsplit(train$Sequence, split = ",")
head(sequen)
head(sequen)
head(sequen)
head(sequences)
dim(seque)
dim(sequences)
summary(sequences)
finalElements <- sapply(sequences, tail, n = 1)
summary(finale)
summary(finalElements)
frequencies <- table(finalElements)
plot(freq)
plot(freq)
plot(freq)
plot(frequencies)
head(freq)
plot(log(frequencies))
# x[j]   = a * x[j-1] + b * x[j-2]
# x[j+1] = a * x[j]   + b * x[j-1]
solveRecurrent <- function(x, depth, offset) {
A <- matrix(0, nrow = depth, ncol = depth)
b <- matrix(0, nrow = depth, ncol = 1)
for (r in 1:depth) {
for (c in 1:depth) {
A[r, c] <- x[offset + (r - 1) + (depth - c)]
}
b[r] <- x[offset + depth + (r-1)]
}
result <- try(round(solve(A, b)));
if ("try-error" %in% class(result))
result <- matrix(-666, nrow = depth, ncol = 1);
result
}
#x11 <- c(1, 1, 2, 3, 5)
#x12 <- c(1, 3, 7, 17)
#solveRecurrent(x11, depth = 2, offset = 1)
isRecurrent <- function(x, depth) {
s1 <- solveRecurrent(x, depth = depth, offset = 1)
s2 <- solveRecurrent(x, depth = depth, offset = 2)
identical(s1, s2)
}
#isRecurrent(x11, depth = 2)
#isRecurrent(x12, depth = 2)
train <- read.csv("../input/train.csv", stringsAsFactors = FALSE, nrow = 1000)
sequences <- lapply(strsplit(train$Sequence, split = ","), FUN = as.numeric)
rec2 <- lapply(sequences, isRecurrent, depth = 2)
rec2 <- lapply(sequences, isRecurrent, depth = 2)
debugSource('C:/prj/Kaggle/Integer Sequence Learning/scripts/Recurrence Equation Solve.R')
class(result)
class(result)
class(result)
debugSource('C:/prj/Kaggle/Integer Sequence Learning/scripts/Recurrence Equation Solve.R')
class(result)
debugSource('C:/prj/Kaggle/Integer Sequence Learning/scripts/Recurrence Equation Solve.R')
class(result)
class(result) != "matrix"
debugSource('C:/prj/Kaggle/Integer Sequence Learning/scripts/Recurrence Equation Solve.R')
class(result)
result
source('C:/prj/Kaggle/Integer Sequence Learning/scripts/Recurrence Equation Solve.R')
sequences[rec2]
sequences[rec2,]
rec2
sum(rec2 == TRUE)
sum(rec2 == FALSE)
sequence[[1]]
sequences[[1]
]
sequences[[rec2]]
sequences[rec2 == TRUE]
x5 <- c(18, 24, 30, 36, 42, 54)
solveRecurrent(x5, depth = 2, offset = 1)
solveRecurrent(x5, depth = 2, offset = 2)
solveRecurrent(x5, depth = 2, offset = 12)
solveRecurrent(x5, depth = 2, offset = 3)
solveRecurrent(x5, depth = 2, offset = 4)
solveRecurrent(x5, depth = 2, offset = 1)
solveRecurrent(x5, depth = 2, offset = 2)
solveRecurrent(x5, depth = 2, offset = 3)
debugSource('D:/prj/Kaggle/Integer Sequence Learning/scripts/Recurrence Equation Solve.R')
x[i+depth]
break;
x[i+depth]
debugSource('D:/prj/Kaggle/Integer Sequence Learning/scripts/Recurrence Equation Solve.R')
x[i+depth]
x
x[5]
x[i+depth]
value
x[i+depth+1]
x[5]
x[6]
debugSource('D:/prj/Kaggle/Integer Sequence Learning/scripts/Recurrence Equation Solve.R')
x[i+depth]
i
x[5]
debugSource('D:/prj/Kaggle/Integer Sequence Learning/scripts/Recurrence Equation Solve.R')
debugSource('D:/prj/Kaggle/Integer Sequence Learning/scripts/Recurrence Equation Solve.R')
source('D:/prj/Kaggle/Integer Sequence Learning/scripts/Recurrence Equation Solve.R')
source('D:/prj/Kaggle/Integer Sequence Learning/scripts/Recurrence Equation Solve.R')
source('D:/prj/Kaggle/Integer Sequence Learning/scripts/Recurrence Equation Solve.R')
debugSource('D:/prj/Kaggle/Integer Sequence Learning/scripts/Recurrence Equation Solve.R')
A[r, c] <- x[offset + (r - 1) + (c-1)]
# x[j]   = a * x[j-1] + b * x[j-2]
# x[j+1] = a * x[j]   + b * x[j-1]
solveRecurrent <- function(x, depth, offset) {
A <- matrix(0, nrow = depth, ncol = depth)
b <- matrix(0, nrow = depth, ncol = 1)
for (r in 1:depth) {
for (c in 1:depth) {
A[r, c] <- x[offset + (r - 1) + (c-1)]
}
b[r] <- x[offset + depth + (r-1)]
}
result <- try(round(solve(A, b)));
if ("matrix" != class(result)) {
result <- matrix(NA, nrow = depth, ncol = 1);
}
t(result)
}
#x11 <- c(1, 1, 2, 3, 5)
#x12 <- c(1, 3, 7, 17)
#x5 <- c(18, 24, 30, 36, 42, 54)
#solveRecurrent(x5, depth = 2, offset = 3)
isRecurrent <- function(x, depth) {
s <- solveRecurrent(x, depth = depth, offset = 1)
result = TRUE
if (!anyNA(s)) {
for(i in (depth+1):(length(x) - depth)) {
value <- 0
for (j in 1:depth) {
value <- value + x[i+j-1] * s[j]
}
if (value != x[i+depth]) {
result = FALSE
break;
}
}
}else
result = FALSE
}
#isRecurrent(x11, depth = 2)
#isRecurrent(x12, depth = 2)
train <- read.csv("../input/train.csv", stringsAsFactors = FALSE, nrow = 1000)
sequences <- lapply(strsplit(train$Sequence, split = ","), FUN = as.numeric)
rec2 <- lapply(sequences, isRecurrent, depth = 2)
# x[j]   = a * x[j-1] + b * x[j-2]
# x[j+1] = a * x[j]   + b * x[j-1]
solveRecurrent <- function(x, depth, offset) {
A <- matrix(0, nrow = depth, ncol = depth)
b <- matrix(0, nrow = depth, ncol = 1)
for (r in 1:depth) {
for (c in 1:depth) {
A[r, c] <- x[offset + (r - 1) + (c-1)]
}
b[r] <- x[offset + depth + (r-1)]
}
result <- try(round(solve(A, b)));
if ("matrix" != class(result)) {
result <- matrix(NA, nrow = depth, ncol = 1);
}
t(result)
}
#x11 <- c(1, 1, 2, 3, 5)
#x12 <- c(1, 3, 7, 17)
#x5 <- c(18, 24, 30, 36, 42, 54)
#solveRecurrent(x5, depth = 2, offset = 3)
isRecurrent <- function(x, depth) {
s <- solveRecurrent(x, depth = depth, offset = 1)
result = TRUE
if (!anyNA(s)) {
for(i in (depth+1):(length(x) - depth)) {
value <- 0
for (j in 1:depth) {
value <- value + x[i+j-1] * s[j]
}
if (is.na(value) | value != x[i+depth]) {
result = FALSE
break;
}
}
}else
result = FALSE
}
#isRecurrent(x11, depth = 2)
#isRecurrent(x12, depth = 2)
train <- read.csv("../input/train.csv", stringsAsFactors = FALSE, nrow = 1000)
sequences <- lapply(strsplit(train$Sequence, split = ","), FUN = as.numeric)
rec2 <- lapply(sequences, isRecurrent, depth = 2)
dim(rec2)
train <- read.csv("../input/train.csv", stringsAsFactors = FALSE, nrow = 1000)
sequences <- lapply(strsplit(train$Sequence, split = ","), FUN = as.numeric)
rec2 <- lapply(sequences, isRecurrent, depth = 2)
isRecurrent <- function(x, depth) {
s <- solveRecurrent(x, depth = depth, offset = 1)
result = TRUE
if (!anyNA(s)) {
for(i in (depth+1):(length(x) - depth)) {
value <- 0
for (j in 1:depth) {
value <- value + x[i+j-1] * s[j]
}
if (value != x[i+depth]) {
result = FALSE
break;
}
}
}else
result = FALSE
}
rec2 <- lapply(sequences, isRecurrent, depth = 2)
isRecurrent <- function(x, depth) {
s <- solveRecurrent(x, depth = depth, offset = 1)
result = TRUE
if (!anyNA(s)) {
for(i in (depth+1):(length(x) - depth)) {
value <- 0
for (j in 1:depth) {
value <- value + x[i+j-1] * s[j]
}
if (is.na(x[i+depth]) | value != x[i+depth]) {
result = FALSE
break;
}
}
}else
result = FALSE
}
rec2 <- lapply(sequences, isRecurrent, depth = 2)
sequences[rec == TRUE]
sequences[rec2 == TRUE]
rec2
isRecurrent <- function(x, depth) {
s <- solveRecurrent(x, depth = depth, offset = 1)
result = TRUE
if (!anyNA(s)) {
for(i in (depth+1):(length(x) - depth)) {
value <- 0
for (j in 1:depth) {
value <- value + x[i+j-1] * s[j]
}
if (is.na(x[i+depth]) || value != x[i+depth]) {
result = FALSE
break;
}
}
}else
result = FALSE
}
isRecurrent <- function(x, depth) {
s <- solveRecurrent(x, depth = depth, offset = 1)
result = TRUE
if (!anyNA(s)) {
for(i in (depth+1):(length(x) - depth)) {
value <- 0
for (j in 1:depth) {
value <- value + x[i+j-1] * s[j]
}
if (is.na(x[i+depth]) || value != x[i+depth]) {
result = FALSE
break;
}
}
}else
result = FALSE
result
}
rec2 <- lapply(sequences, isRecurrent, depth = 2)
?solve
sequences[rec2 == TRUE]
sum(rec2 == TRUE)
sum(rec2 == FALSE)
rec3 <- lapply(sequences, isRecurrent, depth = 3)
sum(rec3 == TRUE)
sequences[rec3 == TRUE]
rec4 <- lapply(sequences, isRecurrent, depth = 4)
sequences[rec4 == TRUE]
sum(rec4 == TRUE)
sum(rec3 == TRUE)
sum(rec2 == TRUE)
train <- read.csv("../input/train.csv", stringsAsFactors = FALSE, nrow = 1000000)
sequences <- lapply(strsplit(train$Sequence, split = ","), FUN = as.numeric)
rec2 <- lapply(sequences, isRecurrent, depth = 2)
sum(rec2 == TRUE)
solveRecurrent <- function(x, depth, offset) {     A <- matrix(0, nrow = depth, ncol = depth)     b <- matrix(0, nrow = depth, ncol = 1)     for (r in 1:depth) {          for (c in 1:depth) {             A[r, c] <- x[offset + (r - 1) + (c-1)]         }         b[r] <- x[offset + depth + (r-1)]      }     result <- try(round(solve(A, b)));     if ("matrix" != class(result)) {         result <- matrix(NA, nrow = depth, ncol = 1);     }     t(result) }
isRecurrent <- function(x, depth) {     s <- solveRecurrent(x, depth = depth, offset = 1)     result = TRUE     if (!anyNA(s)) {       for(i in (depth+1):(length(x) - depth)) {         value <- 0         for (j in 1:depth) {           value <- value + x[i+j-1] * s[j]             }         if (is.na(x[i+depth]) || value != x[i+depth]) {           result = FALSE           break;         }       }     }else       result = FALSE     result }
x11 <- c(1, 1, 2, 3, 5)
isRecurrent(x11, depth = 2)
train <- read.csv("../input/train.csv", stringsAsFactors = FALSE, nrow = 1000000)
sequences <- lapply(strsplit(train$Sequence, split = ","), FUN = as.numeric)
train <- read.csv("../input/train.csv", stringsAsFactors = FALSE, nrow = 1000) sequences <- lapply(strsplit(train$Sequence, split = ","), FUN = as.numeric)
system.time(rec4 <- lapply(sequences, isRecurrent, depth = 4))
train <- read.csv("../input/train.csv", stringsAsFactors = FALSE, nrow = 10000) sequences <- lapply(strsplit(train$Sequence, split = ","), FUN = as.numeric)
system.time(rec4 <- lapply(sequences, isRecurrent, depth = 4))
sum(rec4)
rec4
sum(rec4 == TRUE)
isRecurrent <- function(x, depth) {     s <- solveRecurrent(x, depth = depth, offset = 1)     result = TRUE     if (!anyNA(s)) {       for(i in (depth+1):(length(x) - depth)) {         value <- 0         for (j in 1:depth) {           value <- value + x[i+j-1] * s[j]             }         if (is.na(x[i+depth]) || abs(value - x[i+depth]) < 0.01 ) {           result = FALSE           break;         }       }     }else       result = FALSE     result }
system.time(rec4 <- lapply(sequences, isRecurrent, depth = 4)) # 1.7 on 10000
sum(rec4 == TRUE)
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) testseq <- lapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
length(testseq)
test2 <- lapply(testseq, isRecurrent, depth = 2)
length(test2)
sum(test2 == TRUE)
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$Sequence <- as.numeric(strsplit(test$Sequence, split = ","))
test$Sequence <- lapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
test$Solve2 <- lapply(test$Sequence, FUN = solveRecurrent, depth = 2)
solveRecurrent <- function(x, depth) {     A <- matrix(0, nrow = depth, ncol = depth)     b <- matrix(0, nrow = depth, ncol = 1)     for (r in 1:depth) {          for (c in 1:depth) {             A[r, c] <- x[1 + (r - 1) + (c-1)]         }         b[r] <- x[1 + depth + (r-1)]      }     result <- try(round(solve(A, b)));     if ("matrix" != class(result)) {         result <- matrix(NA, nrow = depth, ncol = 1);     }     t(result) }
test$Solve2 <- lapply(test$Sequence, FUN = solveRecurrent, depth = 2)
head(test$Solve2)
head(test)
test[3]
test[[3]]
test[3,]
str(test[3,])
test$Check2 <- isRecurrent(test$Sequence, 2, test$Solve2)
isRecurrent <- function(x, depth, s) {     result = TRUE     if (!anyNA(s)) {       for(i in (depth+1):(length(x) - depth)) {         value <- 0         for (j in 1:depth) {           value <- value + x[i+j-1] * s[j]             }         if (is.na(x[i+depth]) || abs(value - x[i+depth]) < 0.01 ) {           result = FALSE           break;         }       }     }else       result = FALSE     result }
test$Check2 <- isRecurrent(test$Sequence, 2, test$Solve2)
test$Check2 <- isRecurrent(test$Sequence, 2, test$Solve2)
test$Check2 <- lapply(test$Sequence, FUN = isRecurrent, depth = 2, s = test$Solve2)
test$Check2 <- mapply(isRecurrent, test$Sequence, 2, test$Solve2)
sum(test$Check2 == TRUE)
sum(test$Check2 == FALSE)
head(test, 100)
test[2,]
isRecurrent <- function(x, depth, s) {     result = TRUE     if (!anyNA(s)) {       for(i in (depth+1):(length(x) - depth)) {         value <- 0         for (j in 1:depth) {           value <- value + x[i+j-1] * s[j]             }         if (is.na(x[i+depth]) || abs(value - x[i+depth]) > 0.01 ) {           result = FALSE           break;         }       }     }else       result = FALSE     result }
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$Sequence <- lapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
length(testseq) == 113845
test$Solve2 <- lapply(test$Sequence, FUN = solveRecurrent, depth = 2)
test$Check2 <- mapply(isRecurrent, test$Sequence, 2, test$Solve2)
sum(test$Check2 == TRUE)
sum(test$Check2 == FALSE)
test[test$Check2 == TRUE,]
head(test[test$Check2 == TRUE,])
predictNext <- function(x, depth, s) {     i <- length(x) - depth;     value <- 0     for (j in 1:depth) {         value <- value + x[i + j - 1] * s[j]     }     value }
test[44,]
test[44]$Sequence
test[44,]$Sequence
predictNext(test[44,]$Sequence, 2, test[44,]$Solve2)
test[44,]$Solve2
test[44,]$Solve2[1]
test[44,]$Solve2[2]
class(test[44,]$Solve2)
class(test$     )
class(test$Solve2)
class(test$Solve2[1])
class(test$Solve2[1][1])
class(test$Solve2[1][1][1])
solveRecurrent <- function(x, depth) {     A <- matrix(0, nrow = depth, ncol = depth)     b <- matrix(0, nrow = depth, ncol = 1)     for (r in 1:depth) {          for (c in 1:depth) {             A[r, c] <- x[1 + (r - 1) + (c-1)]         }         b[r] <- x[1 + depth + (r-1)]      }     result <- try(round(solve(A, b)));     if ("matrix" != class(result)) {         result <- matrix(NA, nrow = depth, ncol = 1);     }     t(result)[1,] }
isRecurrent <- function(x, depth, s) {     result = TRUE     if (!anyNA(s)) {       for(i in (depth+1):(length(x) - depth)) {         value <- 0         for (j in 1:depth) {           value <- value + x[i+j-1] * s[j]             }         if (is.na(x[i+depth]) || abs(value - x[i+depth]) > 0.01 ) {           result = FALSE           break;         }       }     }else       result = FALSE     result }
test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000)
test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
test$Solve2 <- lapply(test$Sequence, FUN = solveRecurrent, depth = 2)
test$Check2 <- mapply(isRecurrent, test$Sequence, 2, test$Solve2)
predictNext(test[44,]$Sequence, 2, test[44,]$Solve2)
test[44,]$Solve2
test[44,]$Solve2[1]
test[44,]$Solve2[[1]]
predictNext(test[44,]$Sequence, 2, test[44,]$Solve2[[1]])
predictNext(test[44,]$Sequence[[1]], 2, test[44,]$Solve2[[1]])
test[44,]
predictNext <- function(x, depth, s) {     i <- length(x) - depth + 1;     value <- 0     for (j in 1:depth) {         value <- value + x[i + j - 1] * s[j]     }     value }
predictNext(test[44,]$Sequence[[1]], 2, test[44,]$Solve2[[1]])
test$Predict <- NA
test[test$Check2 == TRUE,]$Predict <- predictNext(test[test$Check2 == TRUE,]$Sequence[[1]], 2, test[test$Check2 == TRUE,]$Solve2[[1]])
test$Predict[!is.na(test$Predict)]
test[test$Check2 == TRUE,]$Predict <- predictNext(test[test$Check2 == TRUE,]$Sequence, 2, test[test$Check2 == TRUE,]$Solve2)
testPredict <- mapply(predictNext, test$Sequence, 2, test$Solve2)
test$Predict[!is.na(test$Predict)]
sum(!is.na(test$Predict))
test[!is.na(test$Predict),]
test$Predict <- mapply(predictNext, test$Sequence, 2, test$Solve2)
test[!is.na(test$Predict),]
test$Predict <- mapply(predictNext, test$Sequence, 2, test$Solve2)
test$Predict <- NA
test$Predict <- mapply(predictNext, test$Sequence, 2, test$Solve2)
sum(!is.na(test$Predict))
sum(!is.na(test$Solve2))
test$Check2 <- mapply(isRecurrent, test$Sequence, 2, test$Solve2, test$Check2)
predictNext <- function(x, depth, s, isRecurrent) {     if (isRecurrent) {         i <- length(x) - depth + 1;         value <- 0         for (j in 1:depth) {             value <- value + x[i + j - 1] * s[j]         }     } else         value <- NA     value }
test$Check2 <- mapply(isRecurrent, test$Sequence, 2, test$Solve2, test$Check2)
test$Predict <- mapply(predictNext, test$Sequence, 2, test$Solve2, test$Check2)
sum(!is.na(test$Solve2))
sum(is.na(test$Solve2))
sum(!is.na(test$Predict))
head(test[test$Check2 == TRUE,])
colnames(test)[2]
colnames(test)[5]
colnames(test)[5] <- "Last"
submit2 <- test[test$Check2 == TRUE, c("Id", "Last")]
length(submit2)
head(submit2)
write.csv(submit2, "../input/recurrent2.csv") 
write.csv(submit2, "../output/recurrent2.csv") 
colnames(submit2)
colnames(submit2[1])
write.csv(submit2, "../output/recurrent2.csv")
write.csv2(submit2, "../output/recurrent2.csv")
write.csv(submit2, "../output/recurrent2.csv", row.names = FALSE)
test$Last <- mapply(predictNext, test$Sequence, 2, test$Solve2, test$Check2) test$Last <- as.integer(test$Last)
test$Last <- lapply(test$Last, function(x) { if (x < 1E8) as.integer(x) else x } test$Last <- lapply(test$Last, function(x) { if (x < 1E8) as.integer(x) else x }) test$Last <- mapply(predictNext, test$Sequence, 2, test$Solve2, test$Check2) test$Last <- lapply(test$Last, function(x) { if (x < 1E8) as.integer(x) else x })
test$Last <- mapply(predictNext, test$Sequence, 2, test$Solve2, test$Check2)
test$Last <- lapply(test$Last, function(x) { if (x < 1E8) { x = as.integer(x) } x })
test$Last <- lapply(test$Last, function(x) { if (x < 100000000) { x = as.integer(x) } x })
test$Last <- lapply(test$Last, function(x) {      if (x < 100000000) 
        x = as.integer(x)
    x
} )
test$Last <- lapply(test$Last, function(x) {      if (x < 100000000) 
        x = as.integer(x)
    x
})
x <- 1e8
class(x)
as.in
as.integer(x)
class(as.integer(x))
test$Last <- mapply(predictNext, test$Sequence, 2, test$Solve2, test$Check2) test$Last <- lapply(test$Last, function(x) {      y <- try(as.integer(x))
    if (class(y) != "integer")
        y <- x
    y
})
warnings()
test$Last <- mapply(predictNext, test$Sequence, 2, test$Solve2, test$Check2) test$Last <- lapply(test$Last, function(x) {     y <- suppressWarnings(try(as.integer(x)))
    if (class(y) != "integer")
        y <- x
    y
})
submit2 <- test[test$Check2 == TRUE, c("Id", "Last")] write.csv(submit2, "../output/recurrent2.csv", row.names = FALSE)
test$Last <- lapply(test$Last, function(x) {     y <- suppressWarnings(try(as.integer(x)))
    if (class(y) != "integer")
        y <- x
    y
})
submit2 <- test[test$Check2 == TRUE, c("Id", "Last")]
colnames(submit2[1])
colnames(test]) colnames(test) colnames(test) ) colnames(test) }
test$Last <- lapply(test$Last, function(x) {     y <- suppressWarnings(try(as.integer(x)))
    if (class(y) != "integer")
        y <- x
    y
})
test$Last
source("D:\\prj\\Kaggle\\Integer Sequence Learning\\scripts\\Recurrence Equation Solve.R", encoding = "Windows-1252")
submit2 <- test[test$Check2 == TRUE, c("Id", "Last")]
source("D:\\prj\\Kaggle\\Integer Sequence Learning\\scripts\\Recurrence Equation Solve.R", encoding = "Windows-1252")
