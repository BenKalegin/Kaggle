test$Sequence[210,18]
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000)
test$Sequence[210,18]
test$Sequence[210,]
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000)
test$Sequence[210,]
test$Sequence[210]
test$Sequence[210] <- gsub("38280596832649216", "38280596832649217", test$Sequence[210])
test$Sequence[210]
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$Sequence[210] <- gsub("38280596832649216", "38280596832649217", test$Sequence[210]) test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
rtvs::debug_source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
test <- test[232,]
test
x <- unlist(test$se)
x <- unlist(test$Sequence)
solveRecurrentOld(x, 2)
solveRecurrentOld(x, 1)
solveRecurrentOld(x, 3)
solveRecurrentOld(x, 2)
x[1] * -256 + x[2] * 257
x[3]
solveRecurrentNobias(x, 2, FALSE)
solveRecurrentNobias(x, 2, TRUE)
isRecurrent(x, 2, c(-256, 257), FALSE)
isRecurrent(x, 2, c(-256, 257), FALSE)
value
x[i + depth]
isRecurrent(test$BigSequence, 2, c(-256, 257), FALSE)
isRecurrent(unlist(test$BigSequence), 2, c(-256, 257), FALSE)
oesi <- readLines("../download/stripped.csv") oesi <- oesi[ - (1:4)] oesi <- sapply(strsplit(oesi, split = ","), FUN = function(x) unlist(x)) trim.trailing <- function(x) sub("\\s+$", "", x) oesiId <- sapply(oesi, FUN = function(x) trim.trailing(head(x, 1))) oesiSequence <- sapply(oesi, FUN = function(x) paste(unlist(x[-1]), collapse = ",")) oesiId <- trim.trailing(oesiId)
class(oesiSequence)
dv df <- data.frame(Id = oesiId, Sequence = oesiSequence)
emptySeqs <- sapply(oesiSequence, function(x) unlist(x) == "")
length(df)
nrow(df)
df <- data.frame(Id = oesiId, Sequence = oesiSequence)
nrow(df)
write.csv(df, "../download/oesi.csv", row.names = FALSE)
df
head(df)
head(test)
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$Sequence[210] <- gsub("38280596832649216", "38280596832649217", test$Sequence[210]) test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
lookup <- data.table(read.csv("../download/oesi.csv", stringsAsFactors = FALSE))     test <- data.table(read.csv("../input/test.csv", stringsAsFactors = FALSE))
library(data.table)
lookup <- data.table(read.csv("../download/oesi.csv", stringsAsFactors = FALSE))
sys.time(lookup <- data.table(read.csv("../download/oesi.csv", stringsAsFactors = FALSE))[order(Sequence)])
time(lookup <- data.table(read.csv("../download/oesi.csv", stringsAsFactors = FALSE))[order(Sequence)])
head(lookup)
names(lookup)
lookup <- data.table(read.csv("../download/oesi.csv", stringsAsFactors = FALSE))
tail(lookup)
tail(lookup$Sequence) )
tail(lookup$Sequence)
head(lookup$Sequence)
s <- tail(lookup$s)
s <- tail(lookup$Sequence)
s
count(lookup$Sequence[lookup$Sequence != ""])
sum(lookup$Sequence != "")
sum(lookup$Sequence == "")
sum(lookup$Sequence == "")    lookup <- lookup[Sequence != ""]
lookup <- lookup[Sequence != ""]
tail(lookup$Sequence)
lookup <- lookup[order(Sequence)]
head(llokup)
head(lookup)
lookup[J("-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,1,-1,-1,-1,-1,0,1")]
?setkey
setkey(lookup, Sequence)
lookup[J("-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,1,-1,-1,-1,-1,0,1")]
lookup[J("-1,-1,-1,-1,-1,-1,-1,0,0")]
lookup <- data.table(read.csv("../download/oesi.csv", stringsAsFactors = FALSE))     lookup <- lookup[Sequence != ""]     setkey(lookup, Sequence)
lookup[J("-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,1,-1,-1,-1,-1,0,1")]
?lookup
?J
lookup[J("1,1,2,1,2,4,2,2,8,7,8,4,3,26,4,13,24,24,6,66,28,8,23,62,104,8,10,158,120,64,42,148,352,80,16,19,350,416,344,16,75,334,1052,448,160,33,756,1252,1440,208,32,136,726,2860,1936,1024,32,61,1578,3448,5176,1440,384,244,1534,7312,7056,5072,512,64")]
lookup[J("3,1,2,1,2,4,2,2,8,7,8,4,3,26,4,13,24,24,6,66,28,8,23,62,104,8,10,158,120,64,42,148,352,80,16,19,350,416,344,16,75,334,1052,448,160,33,756,1252,1440,208,32,136,726,2860,1936,1024,32,61,1578,3448,5176,1440,384,244,1534,7312,7056,5072,512,64")]
lookup[J("3,1,2,1,2", roll = "nearest")]
lookup[J("-1,-1,-1,-1,-1,-1", roll = "nearest")]
 ))
lookup[J("-1,-1,-1,-1,-1,-1"), roll = "nearest"]
?adist
"a" > "b"
"a" < "b"
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     result <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = trunc((low + high) / 2)         if (lookup$Sequence[mid] > value)             high = mid - 1         else if (lookup$Sequence[mid] < value)             low = mid + 1         else {             result <- mid             break;         }     }     result }
searchLookup["-1,-1,-1,-1,-1,-1,-1,0,0"]
searchLookup(lookup, "-1,-1,-1,-1,-1,-1,-1,0,0")
searchLookup(lookup, "3")
searchLookup(lookup, "4")
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/OeisLookup.R", encoding = "Windows-1252")
searchLookup(lookup, "3")
searchLookup(lookup, "3")
lookup$Sequence[mid]
lookup$Sequence[mid]
lookup$Sequence[mid]
lookup$Sequence[mid+1]
lookup$Sequence[mid+2]
lookup$Sequence[mid-1]
lookup$Sequence[mid]
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = trunc((low + high) / 2)         if (lookup$Sequence[mid] > value)             high = mid - 1         else if (lookup$Sequence[mid] < value)             low = mid + 1         else {             break;         }     }     mid }
searchLookup(lookup, "3")
lookup[(-2:2) + searchLookup(lookup, "3")]
lookup[(-2:2) + searchLookup(lookup, "4")]
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = trunc((low + high) / 2)         if (lookup$Sequence[mid] > value)             high = mid - 1         else if (lookup$Sequence[mid] < value)             low = mid + 1         else {             break;         }     }     lookup$Sequence[mid + 1] >= value ? mid : mid + 1 }
lookup[(-2:2) + searchLookup(lookup, "4")]
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = trunc((low + high) / 2)         if (lookup$Sequence[mid] > value)             high = mid - 1         else if (lookup$Sequence[mid] < value)             low = mid + 1         else {             break;         }     }     ifelse(lookup$Sequence[mid + 1] >= value, mid, mid + 1) }
lookup[(-2:2) + searchLookup(lookup, "4")]
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = ceiling((low + high) / 2)         if (lookup$Sequence[mid] > value)             high = mid - 1         else if (lookup$Sequence[mid] < value)             low = mid + 1         else {             break;         }     }     mid }
lookup[(-2:2) + searchLookup(lookup, "4")]
lookup[(-2:2) + searchLookup(lookup, "4,1")]
lookup[(-2:2) + searchLookup(lookup, "3")]
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = ceiling((low + high) / 2)         if (lookup$Sequence[mid] > value)             high = mid - 1         else if (lookup$Sequence[mid] < value)             low = mid + 1         else {             break;         }     }     while(mid < nrow(lookup)-1 & startsWith(lookup$Sequence[mid+1], value))         mid <- mid + 1 }
lookup[(-2:2) + searchLookup(lookup, "3")]
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = ceiling((low + high) / 2)         if (lookup$Sequence[mid] > value)             high = mid - 1         else if (lookup$Sequence[mid] < value)             low = mid + 1         else {             break;         }     }     while (mid < nrow(lookup) - 1 & startsWith(lookup$Sequence[mid + 1], value))         mid <- mid + 1 }
lookup[(-2:2) + searchLookup(lookup, "3")]
library(base)
lookup[(-2:2) + searchLookup(lookup, "3")]
?base
version()
version
library(base)
sessionInfo()
startsWith = function(x, prefix) {     if (!is.character(x) || !is.character(prefix))         stop("non-character object(s)")     suppressWarnings(substr(x, 1L, nchar(prefix)) == prefix) }
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = ceiling((low + high) / 2)         s <- lookup$Sequence[mid]         if (s > value)             high = mid - 1         else if (s < value)             low = mid + 1         else {             break;         }     }     while (mid < nrow(lookup) - 1 & startsWith(lookup$Sequence[mid + 1], value))         mid <- mid + 1 }
lookup[(-2:2) + searchLookup(lookup, "3")]
rtvs::debug_source("D:/prj/Kaggle/Integer Sequence Learning/scripts/OeisLookup.R", encoding = "Windows-1252")
lookup[(-2:2) + searchLookup(lookup, "3")]
mid < nrow(lookup) - 1
tartsWith(lookup$Sequence[mid + 1], value)
startsWith(lookup$Sequence[mid + 1], value)
lookup[(-2:2) + searchLookup(lookup, "3")]
startsWith("123", "12")
startsWith("123", "124")
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = ceiling((low + high) / 2)         s <- lookup$Sequence[mid]         if (s > value)             high = mid - 1         else if (s < value)             low = mid + 1         else {             break;         }     }     if ((mid < nrow(lookup) - 1) & (startsWith(lookup$Sequence[mid + 1], value)))         mid <- mid + 1      mid    }
lookup[(-2:2) + searchLookup(lookup, "3")]
lookup[(-2:2) + searchLookup(lookup, "3,-1")]
?setdiff
substring("123456", 3)
length("123")
length("123"[[1]])
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = ceiling((low + high) / 2)         s <- lookup$Sequence[mid]         if (s > value)             high = mid - 1         else if (s < value)             low = mid + 1         else {             break;         }     }     if ((mid < nrow(lookup) - 1) & (startsWith(lookup$Sequence[mid + 1], value)))         mid <- mid + 1     diff <- substr(lookup$Sequence[mid], nchar(value))     diffSeq <- strsplit(diff, split = ",")     diffSeq[1] }
sea
searchLookup(lookup, "3,-1")
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = ceiling((low + high) / 2)         s <- lookup$Sequence[mid]         if (s > value)             high = mid - 1         else if (s < value)             low = mid + 1         else {             break;         }     }     if ((mid < nrow(lookup) - 1) & (startsWith(lookup$Sequence[mid + 1], value)))         mid <- mid + 1     diff <- substring(lookup$Sequence[mid], nchar(value))     diffSeq <- strsplit(diff, split = ",")     diffSeq[1] }
searchLookup(lookup, "3,-1")
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/OeisLookup.R", encoding = "Windows-1252")
searchLookup(lookup, "3,-1")
lookup$Sequence[mid]
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = ceiling((low + high) / 2)         s <- lookup$Sequence[mid]         if (s > value)             high = mid - 1         else if (s < value)             low = mid + 1         else {             break;         }     }     if ((mid < nrow(lookup) - 1) & (startsWith(lookup$Sequence[mid + 1], value)))         mid <- mid + 1     diff <- substring(lookup$Sequence[mid], nchar(value)+2)     diffSeq <- strsplit(diff, split = ",")     diffSeq[1] }
searchLookup(lookup, "3,-1")
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = ceiling((low + high) / 2)         s <- lookup$Sequence[mid]         if (s > value)             high = mid - 1         else if (s < value)             low = mid + 1         else {             break;         }     }     if ((mid < nrow(lookup) - 1) & (startsWith(lookup$Sequence[mid + 1], value)))         mid <- mid + 1     diff <- substring(lookup$Sequence[mid], nchar(value)+2)     diffSeq <- unlist(strsplit(diff, split = ","))     diffSeq[1] }
searchLookup(lookup, "3,-1")
head(test)
sapply(head(test$Sequence), searchLookup, lookup)
searchLookup <- function(value, lookup) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = ceiling((low + high) / 2)         s <- lookup$Sequence[mid]         if (s > value)             high = mid - 1         else if (s < value)             low = mid + 1         else {             break;         }     }     if ((mid < nrow(lookup) - 1) & (startsWith(lookup$Sequence[mid + 1], value)))         mid <- mid + 1     diff <- substring(lookup$Sequence[mid], nchar(value)+2)     diffSeq <- unlist(strsplit(diff, split = ","))     diffSeq[1] }
sapply(head(test$Sequence), FUN = searchLookup, lookup = lookup)
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/OeisLookup.R", encoding = "Windows-1252")
sapply(head(test$Sequence), FUN = searchLookup, lookup = lookup)
sapply(head(test$Sequence, 1), FUN = searchLookup, lookup = lookup)
sapply(head(test$Sequence, 1), FUN = searchLookup, lookup = lookup)
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/OeisLookup.R", encoding = "Windows-1252")
head(test$Sequence, 1)
sapply(head(test$Sequence, 1), FUN = searchLookup, lookup = lookup)
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/OeisLookup.R", encoding = "Windows-1252")
sapply(head(test$Sequence, 1), FUN = searchLookup, lookup = lookup)
lookup <- data.table(read.csv("../download/oesi.csv", stringsAsFactors = FALSE))
library(data.table)
lookup <- data.table(read.csv("../download/oesi.csv", stringsAsFactors = FALSE))
lookup <- lookup[Sequence != ""]     setkey(lookup, Sequence)
test <- data.table(read.csv("../input/test.csv", stringsAsFactors = FALSE))
rtvs::debug_source("D:/prj/Kaggle/Integer Sequence Learning/scripts/OeisLookup.R", encoding = "Windows-1252")
sapply(head(test$Sequence, 1), FUN = searchLookup, lookup = lookup)
nchar(value)
strsplit(diff, split = ",")
diffSeq <- unlist(strsplit(diff, split = ","))
diffSeq <- unlist(strsplit(diff, split = ","))
diffSeq
diffSeq[1]
sapply(head(test$Sequence, 10), FUN = searchLookup, lookup = lookup)
unlist(sapply(head(test$Sequence, 10), FUN = searchLookup, lookup = lookup))
unlist(sapply(head(test$Sequence, 10), FUN = searchLookup, lookup = lookup))[1]
unlist(sapply(head(test$Sequence, 10), FUN = searchLookup, lookup = lookup))[1][1]
test$Last <- sapply(head(test$Sequence), FUN = searchLookup, lookup = lookup)
test$Last <- sapply(test$Sequence, FUN = searchLookup, lookup = lookup)
sum(test$Last!= "")
sum(test$Last != NA)
sum(!is.na(test$Last))
sum(is.na(test$Last))
write.csv(df[, c("Id", "Last", "Sequence")], "../download/lookup.csv", row.names = FALSE)
write.csv(test[, c("Id", "Last", "Sequence")], "../download/lookup.csv", row.names = FALSE)
write.csv(test, "../download/lookup.csv", row.names = FALSE)
write.csv(test[    fwrite(test, "../download/lookup.csv", row.names = FALSE), c("Id", "Last", "Sequence")], "../download/lookup.csv", row.names = FALSE)
library(data.table)
require(readr)
fwrite(test, "../download/lookup.csv", row.names = FALSE)
head(test[,"Id"])
head(test[,c("Id")])
test[, Sequence := NULL]
write.csv(test, "../download/lookup.csv", row.names = FALSE)
mid
head(lookup)
submission17 <- read.csv("../submissions/submissions/17 (17772)/submission.csv", stringsAsFactors = FALSE)
submission17 <- read.csv("../submissions/17 (17772)/submission.csv", stringsAsFactors = FALSE)
submission17 <- read.csv("../submissions/17 (17772)/submission.csv", stringsAsFactors = FALSE)
verified <- read.csv(test, "../download/lookup.csv", stringsAsFactors = FALSE)
verified <- read.csv("../download/lookup.csv", stringsAsFactors = FALSE)
verified <- data.table(read.csv("../download/lookup.csv", stringsAsFactors = FALSE))
setkey(verified, Id)
submission17 <- sapply(submission17$Id, function(x) verified[J(x)])
submission17 <- read.csv("../submissions/17 (17772)/submission.csv", stringsAsFactors = FALSE)
submission17$Verified <- sapply(submission17$Id, function(x) verified[J(x)])
sapply(head(submission17$Id), function(x) verified[J(x)])
verified[J(1)]
str(verified)
verified <- data.table(read.csv("../download/lookup.csv", stringsAsFactors = FALSE, colClasses = c("integer", "character")))
hear(verified)
head(verified)
setkey(verified, Id)
submission17$Verified <- sapply(submission17$Id, function(x) verified[J(x)])
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/OeisLookup.R", encoding = "Windows-1252")
submission17$Verified <- sapply(1: nrow(submission17), function(i) {     verified[J(submission17$Id[i])]
if (i %% 1000 == 0) {         print(paste("Done", i, "sequences"))     }
})
sum(submission17$Verified == submission17$Last)
head(submis)
head(submission17)
tail(submission17)
sum(submission17$Verified != NULL)
str(verified)
verified <- data.table(read.csv("../download/lookup.csv", stringsAsFactors = FALSE, colClasses = c("integer", "character")))
str(verified)
setkey(verified, Id)
str(verified)
verified[J(submission17$Id[1])]
verified[J(submission17$Id[2])]
submission17$Verified <- sapply(1: nrow(submission17), function(i) {     if (i %% 1000 == 0) {         print(paste("Done", i, "sequences"))     }
verified[J(submission17$Id[i])]
})
submission17 <- read.csv("../submissions/17 (17772)/submission.csv", stringsAsFactors = FALSE)
submission17$Verified <- sapply(1: nrow(submission17), function(i) {     if (i %% 1000 == 0) {         print(paste("Done", i, "sequences"))     }
verified[J(submission17$Id[i])]
})
s <- sapply(113000: nrow(submission17), function(i) {     if (i %% 1000 == 0) {         print(paste("Done", i, "sequences"))     }
verified[J(submission17$Id[i])]
})
s <- sapply(1: nrow(submission17), function(i) {     if (i %% 1000 == 0) {         print(paste("Done", i, "sequences"))     }
verified[J(submission17$Id[i])]
})
head(s)
s <- sapply(1: nrow(submission17), function(i) {     if (i %% 1000 == 0) {         print(paste("Done", i, "sequences"))     }
verified[J(submission17$Id[i])]$Last
})
head(s)
submission17$Verified <- s
sum(submission17$Verified == submission17$Last)
head(submission17)
sum(submission17$Verified == submission17$Last, na.rm)
sum(submission17$Verified == submission17$Last, na.rm = T)
nrow(subm)
nrow(submission17)
nrow(submission17) / 19918
19918 / nrow(submission17)
test$Repeated <- sapply(test$Sequence, function(x) {     x <- unlist(x)     value <- (length(x) > 1) & (x[length(x)] == x[length(x) - 1])     value }) sum(unlist(test$Repeated)) #5524
head(test$)test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$Sequence[210] <- gsub("38280596832649216", "38280596832649217", test$Sequence[210]) test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000)
test$Sequence[210] <- gsub("38280596832649216", "38280596832649217", test$Sequence[210])
test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz)
library(gmp)
test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
test$Repeated <- sapply(test$Sequence, function(x) {     x <- unlist(x)     value <- (length(x) > 1) & (x[length(x)] == x[length(x) - 1])     value })
sum(unlist(test$Repeated)) #5524
sum(test$Repeated) #5524
test$Repeated <- unlist(test$Repeated))
test$Repeated <- unlist(test$Repeated)
r <- which(test$Repeated)
r <- which(test$Repeated == TRUE)
head(r)
sr <- submission17[r]
sr <- submission17[r,]
sr[sr$Last != 0]
sum(sr$Last != 0)
sum(sr$Last == 0)
nrow(submission17)
nrow(test)
submission17[r,] <- sapply(test$Sequence[r], tail, 1)
submission17 <- read.csv("../submissions/17 (17772)/submission.csv", stringsAsFactors = FALSE)
submission17$Last[r] <- sapply(test$Sequence[r], tail, 1)
sum(submission17$Last != 0)
write.csv(submission17, "../submissions/17 (17772)/submissionWithRepeats.csv", row.names = FALSE)
submission17 <- read.csv("../submissions/17 (17772)/submission.csv", stringsAsFactors = FALSE, colClasses = c("integer", "character"))
submission17$Last[r] <- sapply(test$Sequence[r], tail, 1)
write.csv(submission17, "../submissions/17 (17772)/submissionWithRepeats.csv", row.names = FALSE)
submission17 <- read.csv("../submissions/17 (17772)/submission.csv", stringsAsFactors = FALSE, colClasses = c("integer", "character"))
r <- which(test$Repeated == TRUE & submission17$Last != 0) submission17$Last[r] <- sapply(test$Sequence[r], tail, 1) write.csv(submission17, "../submissions/17 (17772)/submissionWithRepeats.csv", row.names = FALSE)
r <- which(test$Repeated == TRUE & submission17$Last == 0) submission17$Last[r] <- sapply(test$Sequence[r], tail, 1) write.csv(submission17, "../submissions/17 (17772)/submissionWithRepeats.csv", row.names = FALSE)
x <- test$Sequence[327] # id 649 x <- unlist(x) solveRecurrentBias(x ^ (1 / 8), 2, TRUE) # 0 1 2
solveRecurrentBias <- function(x, depth, takeLast = TRUE) {     x <- unlist(x)     if (length(x) - 2 * depth < 1) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         A <- matrix(NA, nrow = depth + 1, ncol = depth + 1, byrow = TRUE)         b <- matrix(NA, nrow = depth + 1, ncol = 1)         offset <- 1         if (takeLast == TRUE) {             offset <- length(x) - 2 * depth             while ((offset > 1) & (abs(x[offset]) > 1e4))                 offset <- offset - 1             }         for (r in 1:(depth + 1)) {             A[r, 1:depth] <- x[(offset + (r - 1)):(offset + (r - 1) + depth - 1)]             #for (c in 1:depth) A[r, c] <- x[offset + (r - 1) + (c - 1)]             A[r, depth + 1] <- 1             b[r] <- x[offset + depth + (r - 1)]         }         solved <- try(solve(A, b))         if ("matrix" != class(solved))             result <- matrix(NA, nrow = depth, ncol = 1)         else             result <- round(solved, 1);         }     t(result)[1,] } solveRecurrentNobias <- function(x, depth, takeLast = TRUE) {     x <- unlist(x)     if (length(x) - 2 * depth < 1) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         A <- matrix(NA, nrow = depth, ncol = depth, byrow = TRUE)         b <- matrix(NA, nrow = depth, ncol = 1)         offset <- 1         if (takeLast == TRUE) {             offset <- length(x) - 2 * depth             while ((offset > 1) & (abs(x[offset]) > 1e4))                 offset <- offset - 1             }         for (r in 1:depth) {             A[r, 1:depth] <- x[(offset + (r - 1)):(offset + (r - 1) + depth - 1)]             b[r] <- x[offset + depth + (r - 1)]         }         solved <- try(solve(A, b))         if ("matrix" != class(solved))             result <- matrix(NA, nrow = depth, ncol = 1)         else             result <- round(solved, 1);         }     t(result)[1,] } solveRecurrentOld <- function(x, depth) {     if (length(x) < depth + 1) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         A <- matrix(0, nrow = depth, ncol = depth)         b <- matrix(0, nrow = depth, ncol = 1)         for (r in 1:depth) {             for (c in 1:depth) {                 A[r, c] <- x[1 + (r - 1) + (c - 1)]             }             b[r] <- x[1 + depth + (r - 1)]         }         result <- try(round(solve(A, b)));         if ("matrix" != class(result)) {             result <- matrix(NA, nrow = depth, ncol = 1);         }     }     t(result)[1,] } lmRecurrent <- function(x, depth, takeLast = TRUE) {     x <- unlist(x)     if (length(x) - depth < 1) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         if (takeLast) {             df <- data.frame(y = tail(x, - depth))         }         formulaString <- "y~"         for (i in 1:depth) {             df[[paste0("x", i)]] <- x[i:(length(x) - depth + i - 1)]             formulaString <- paste0(formulaString, "+x", i)         }         formulaString <- sub("~\\+", "~", formulaString)         fit <- lm(formula(formulaString), df)         maxResidual <- max(abs(fit$residuals))         df <- list()         for(i in 1:depth)         {             df[[paste0("x",i)]] <- x[length(x)-depth+i]         }         df <- as.data.frame(df)         prediction <- predict(fit, df)         prediction <- round(prediction)     }     prediction } isRecurrent <- function(x, depth, s, biased = FALSE) {     result = FALSE     if (!anyNA(s)) {         ts <- t(head(s, depth))         bias = ifelse(biased, tail(s, 1), 0)         match <- 0         notmatch <- 0         for (i in depth:(length(x) - depth)) {             value <- ts %*% x[i:(i + depth - 1)] + bias             if (is.na(value))                 stop()             if (abs(value - x[i + depth]) < abs(value) / 1E8)                 match <- match + 1             else                 notmatch <- notmatch + 1             }         result <- match > notmatch     }     result } predictNext <- function(x, depth, s, isRecurrent, biased = FALSE) {     #print(id)     s <- unlist(s)     if (isRecurrent) {         i <- length(x) - depth + 1;         value <- as.bigz(0)         for (j in 1:depth) {             value <- add.bigz(value, div.bigz(x[i + j - 1] * as.bigz(round(s[j] * 10)), as.bigz(10)))         }         if (biased == TRUE)             value <- value + as.bigz(round(s[j + 1]))         if (is.na(value))             stop()         } else             value <- NA         as.character(value) } #system.time(rec4 <- lapply(sequences, isRecurrent, depth = 4)) # 1.7 on 10000, then 3.07 when value == x[] changed to abs(value - x) < 0.01, but records found 6120 instead of 227 test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$Sequence[210] <- gsub("38280596832649216", "38280596832649217", test$Sequence[210]) test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric) # length(testseq) == 113845 #test$Solve2 <- lapply(test$Sequence, FUN = solveRecurrent, depth = 2) #test$Check2 <- mapply(isRecurrent, test$Sequence, 2, test$Solve2) # sum(test$Check2 == TRUE) 2510 # sum(test$Check3 == TRUE) 2586 # sum(test$Check4 == TRUE) 2505 # sum(test$Check5 == TRUE) 1637 n <- function(prefix, number) {     paste(prefix, i, sep = "") } limitDepth <- 70
#powers x <- test$Sequence[327] # id 649 x <- unlist(x) solveRecurrentBias(x ^ (1 / 8), 2, TRUE) # 0 1 2
x <- test$Sequence[327]
x
x <- unlist(x)
x
test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
x <- test$Sequence[327] # id 649 x <- unlist(x) solveRecurrentBias(x ^ (1 / 8), 2, TRUE) # 0 1 2
submission17 <- read.csv("../submissions/17 (17772)/submission.csv", stringsAsFactors = FALSE, colClasses = c("integer", "character"))
r <- which(test$Repeated == TRUE & submission17$Last == 0) submission17$Last[r] <- sapply(test$Sequence[r], tail, 1)
r$Last[r$Last == 0] <- 1
r <- which(submission17$Last == 0)
submission17$Last[submission17$Last == 0] <- 1
write.csv(submission17, "../submissions/17 (17772)/submissionWithRepeats.csv", row.names = FALSE)
submission17 <- read.csv("../submissions/17 (17772)/submission.csv", stringsAsFactors = FALSE, colClasses = c("integer", "character"))
submission17$Last[r] <- sapply(test$Sequence[r], tail, 1)
r <- which(submission17$Last == 0)
r <- which(submission17$Last == 0)
submission17$Last[r] <- 1
write.csv(submission17, "../submissions/17 (17772)/submissionWithRepeats.csv", row.names = FALSE)
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Repeats.R", encoding = "Windows-1252")
source('D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R')
View(makeRecurrentMatrix)
source('D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R')
i
j
options(error=recover)
source('D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R')
options()
debugSource('D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R')
options(error=traceback)
debugSource('D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R')
xs
vs
ds
vs %*% ds
t(us)
t(us) %*% bs
vs %*% ds
vs %*% ds %*% (t(us) %*% bs)
vs %*% ds
ds
vs
a.svd$d
a.svd$d[1:depth]
ds
1 / a.svd$d[1:depth]
diag(1 / a.svd$d[1:depth])
A
b
a.svd$d
u
v
diag(1)
diag(1 / 552)
diag(x = 1 / 552)
diag(0.01)
debugSource('D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R')
ds
xs
vs %*% ds
source('D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R')
source('D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R')
solve(1)
solveOrder(1)
debugSource('D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R')
debugSource('D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R')
debugSource('D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R')
solveOrder(2)
solveOrder(2)
tail(s, 1)
head(s, depth)
solveOrder(2)
solveOrder(2)
solveOrder(2)
A
3
solveOrder(2)
source('D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R')
3:
:
source('D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R')
debugSource('D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R')
s[j]
s[j] * 10
as.bigz(round(s[j] * 10))
x[i + j - 1] * as.bigz(round(s[j] * 10))
x[i + j - 1]
x
unlist(x)
i + j - 1
x[1]
x[i + j - 1]
str(x)
x[1]
x[1,0]
x[1,]
x[1]
x[2]
x[1]
x[1][1]
solveOrder(1)
debugSource('D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R')
x[i + j - 1]
x
debugSource('D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R')
x[1]
debugSource('D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R')
test$BigSequence[j]
test$BigSequence[j][1]
class(test$BigSequence[j])
unlist(test$BigSequence[j])
class(unlist(test$BigSequence[j]))
debugSource('D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R')
class(unlist(test$BigSequence[j]))
class(test$BigSequence[j])
test$BigSequence[j]
test$BigSequence[j][1]
test$BigSequence[j][[1]]
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000)
test$Sequence[210] <- gsub("38280596832649216", "38280596832649217", test$Sequence[210])
test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz)
test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
test$BigSequence[1]
class(test$BigSequence[1])
class(test$BigSequence[[1])
class(test$BigSequence[[1]])
test$BigSequence[[1]]
test$Sequence[[1]]
test$Sequence[1]
test$Sequence[1][1]
test$Sequence[1][1][1]
unlist(test$Sequence[1])
unlist(test$BigSequence[1])
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000)
test$Sequence[210] <- gsub("38280596832649216", "38280596832649217", test$Sequence[210])
strSequence <- strsplit(test$Sequence, split = ",")
strSequence[1]
unlist(strSequence[1])
test$BigSequence <- sapply(strSequence, FUN = as.bigz)
test$BigSequence[1]
test$BigSequence[2]
test$BigSequence[1]
test$BigSequence <- sapply(strSequence, FUN = function(x) { as.bigz(unlist(x))} )
test$BigSequence[1]
str(test$BigSequence)
summary(test$BigSequence)
strSequence <- sapply(strsplit(test$Sequence, split = ","))
strSequence <- sapply(test$Sequence, strsplit, split = ",")
class(strSequence)
class(strSequence[1])
strSequence[1]
unlist(strSequence[1])
test$BigSequence <- sapply(strSequence, FUN = function(x) { as.bigz((x))} )
class(test$BigSequence)
class(test$BigSequence[1])
test$BigSequence[1]
debugSource('D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R')
test$BigSequence[j]
x[1]
n
solveOrder(1)
value
x[i + j - 1]
solveOrder(1)
x
x[1]
x[[1]]
x[[[1]]]
x[[1]]
x[[2]]
x[[1]]
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000)
strSequence <- strsplit(test$Sequence, split = ",")
strSequence
strSequence[1]
class(strSequence[1])
strSequence[2]
test$BigSequence <- as.bigz(strSequence)
test$BigSequence <- sapply(strSequence, FUN = function(x) { as.bigz(unlist(x))} )
test$BigSequence[1]
test$BigSequence[2]
test$BigSequence[3]
x <- c(as.bigz(1))
x
x <- c(as.bigz(1), as.bigz(2))
x
x[1]
x[2]
c(1,2)
as.bigz(c(1,2))
as.bigz(c(1,2))[1]
as.bigz(c(1,2))[2]
strSequence <- as.vector(strsplit(test$Sequence, split = ","))
strSequence[1]
class(strSequence[1])
strSequence <- sapply(test$Sequence, FUN = function(x) { unlist(strsplit(x, split = ","))})
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000)
strSequence <- sapply(test$Sequence, FUN = function(x) { unlist(strsplit(x, split = ","))})
strSequence[1]
class(strSequence[1])
strSequence <- sapply(test$Sequence, FUN = function(x) { as.vector(strsplit(x, split = ","))})
class(strSequence[1])
strSequence[1]
strSequence[1][1]
strsplit("1,2,3", split = ",")
unlist(strsplit("1,2,3", split = ","))
class(unlist(strsplit("1,2,3", split = ",")))
strSequence <- strsplit(test$Sequence, split = ",")
test$BigSequence <- sapply(strSequence, FUN = function(x) { as.bigz(x)} )
test$BigSequence[1]
test$BigSequence[[1]]
test$BigSequence[[1]][1]
debugSource('D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R')
x[1]
do.call(sum, list(c(1,2,4,1,2), na.rm = TRUE))
rtvs::debug_source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
rtvs::debug_source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
rtvs::debug_source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
rtvs::debug_source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
sum(!is.na(test$Solved))
found
rtvs::debug_source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
rtvs::debug_source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
sum(!is.na(test$Solved))
sum(!is.na(test$Solved))
test
test$Solved )            takeLast <- FALSE             solve <- solveRecurrentNobias(test$Sequence[j], depth = order, takeLast)             if (isRecurrent(test$Sequence[j], order, solve, FALSE)) {                 test$SolvedL[j] <- "Linear solve, beginning"             } else {                 takeLast <- TRUE                 solve <- solveRecurrentNobias(test$Sequence[j], depth = order, takeLast)                 if (isRecurrent(test$Sequence[j], order, solve, FALSE)) {                     test$SolvedL[j] <- "Linear solve, ending"                 }             }
rtvs::debug_source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
sum(!is.na(test$Solved))
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
sum(!is.na(test$Solved))
sum(!is.na(test$SolvedL))
test[is.na(test$Solved) != is.na(test$SolvedL)]
test[is.na(test$Solved) != is.na(test$SolvedL),]
head(test[is.na(test$Solved) != is.na(test$SolvedL),])
verified <- data.table(read.csv("../download/lookup.csv", stringsAsFactors = FALSE, colClasses = c("integer", "character")))
library(data.table) verified <- data.table(read.csv("../download/lookup.csv", stringsAsFactors = FALSE, colClasses = c("integer", "character")))
sum(!is.na(test$Solved))
sum(!is.na(test$Solved) & submission$Last == verified$Last)
sum(!is.na(test$Solved) & verfied$Last == verified$Last)
sum(!is.na(test$Solved) & verified$Last == verified$Last)
sum(!is.na(test$Solved) & (verified$Last == verified$Last))
sum(!is.na(test$Solved) && (verified$Last == verified$Last))
sum(!is.na(test$Solved) & (test$Last == verified$Last))
sum(!is.na(test$Last) & (test$Last == verified$Last))
sum(!is.na(test$Last) & !is.na(verfied$Last) & (test$Last == verified$Last))
sum(!is.na(test$Last) & !is.na(verified$Last) & (test$Last == verified$Last))
sum(!is.na(test$LastL) & !is.na(verified$Last) & (test$LastL == verified$Last))
sum(!is.na(test$LastL) & !is.na(verified$Last) & (test$LastL == verified$Last) & (is.na(test$Last)))
sum(!is.na(test$LastL) & !is.na(verified$Last) & (test$LastL == verified$Last) & (is.na(test$Last) | (test$Last != test$LastL)))
solveL <- (!is.na(test$LastL) & !is.na(verified$Last) & (test$LastL == verified$Last) & (is.na(test$Last) | (test$Last != test$LastL)) )
solveL
test[solveL == TRUE]
test[SolveL == TRUE]
test[solveL == TRUE,]
test[solveL == TRUE,]
head(test[solveL == TRUE,])
c <- solveSvd(test$Sequence[1188], 2)
c
c <- solveSvd(test$Sequence[1188], 2)
c
c <- solveSvd(test$Sequence[1188], 1)
c
solveRecurrentNobias(test$Sequence[1188], 2)
solveSvd(test$Sequence[1188], 2)
solveSvd(test$Sequence[1188], 2, FALSE)
c <- solveSvd(test$Sequence[1188], 2, FALSE)
isRecurrent(test$Sequence[1188], 2, c, FALSE)
c %*% test$Sequence[1188, 1:2]
c %*% t(test$Sequence[1188, 1:2])
t(c) %*% test$Sequence[1188, 1:2]
t(c)
t(c) %*% test$Sequence[1188, 1:2]
test$Sequence[1188, 1:2]
test$Sequence[1188][1:2]
unlist(test$Sequence[1188])[1:2]
t(c) %*% unlist(test$Sequence[1188])[1:2]
t(c) %*% unlist(test$Sequence[1188])[2:3]
length(unlist(test$Sequence[1188]))
t(c) %*% unlist(test$Sequence[1188])[73:74]
t(c) %*% unlist(test$Sequence[1188])[72:73]
unlist(test$Sequence[1188])[72:73]
unlist(test$Sequence[1188])[73:74]
t(c) %*% unlist(test$Sequence[1188])[73:74]
t(c) %*% unlist(test$Sequence[1188])[71:72]
c <- solveSvd(test$Sequence[1188], 2, TRUE)
c
t(c) %*% unlist(test$Sequence[1188])[71:72]
t(c) %*% unlist(test$Sequence[1188])[73:74]
t(c) %*% unlist(test$Sequence[1188])[72:73]
isRecurrent(test$Sequence[1188], 2, c, FALSE)
c <- solveSvd(test$Sequence[1188], 2, FALSE)
isRecurrent(test$Sequence[1188], 2, c, FALSE)
c
rtvs::debug_source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
isRecurrent(test$Sequence[1188], 2, c, FALSE)
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
solveL <- (!is.na(test$LastL) & !is.na(verified$Last) & (test$LastL == verified$Last) & (is.na(test$Last) | (test$Last != test$LastL)) )
head(test[solveL,])
sum(solveL)
c <- solveSvd(test$Sequence[2495], 2, FALSE)
c
c <- solveSvd(test$Sequence[2495], 2, TRUE)
c
c <- solveSvd(test$Sequence[2495], 1, TRUE)
c
isRecurrent(test$Sequence[2495], 1, c, FALSE)
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
solveL <- (!is.na(test$LastL) & !is.na(verified$Last) & (test$LastL == verified$Last) & (is.na(test$Last) | (test$Last != test$LastL)) )
sum(solveL)
head(test[solveL,])
c <- solveSvd(test$Sequence[5441], 1, TRUE)
c
c <- solveSvd(test$Sequence[5441], 1, FALSE)
c
solve1 <- (!is.na(test$Last) & !is.na(verified$Last) & (test$Last == verified$Last) & (is.na(test$LastL) | (test$Last != test$LastL)) ) )))) )
solve1 <- (!is.na(test$Last) & !is.na(verified$Last) & (test$Last == verified$Last) & ((is.na(test$LastL) | (test$Last != test$LastL)) ) )
sum(solve1)
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
solveL <- (!is.na(test$LastL) & !is.na(verified$Last) & (test$LastL == verified$Last) & (is.na(test$Last) | (test$Last != test$LastL)) )
library(data.table) verified <- data.table(read.csv("../download/lookup.csv", stringsAsFactors = FALSE, colClasses = c("integer", "character")))
solveL <- (!is.na(test$LastL) & !is.na(verified$Last) & (test$LastL == verified$Last) & (is.na(test$Last) | (test$Last != test$LastL)) )
test[solveL,]
solveSvd(test$Sequence[5441], 1, TRUE)
solveSvd(test$Sequence[5441], 1, FALSE)
solveSvd(test$Sequence[6610], 1, FALSE)
solveSvd(test$Sequence[6610], 2, FALSE)
solveSvd(test$Sequence[6610], 2, TRUE)
test$Sequence[6610]
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 1000000)
strSequence <- strsplit(test$Sequence, split = ",")
test$BigSequence <- sapply(strSequence, FUN = as.bigz) test$Sequence <- sapply(strSequence, FUN = as.numeric)
library(gmp)
test$BigSequence <- sapply(strSequence, FUN = as.bigz)
formulaString <- "y ~ x"
j <- 1
fit <- lm(formula(formulaString), test$Sequence[j])
        y <- data.frame(y = test$Sequence[j], x = 1:length(test$Sequence[j]))
        fit <- lm(formula(formulaString), y)
y
        y <- data.frame(y =unlist(test$Sequence[j]), x = 1:length(test$Sequence[j]))
y
        fit <- lm(formula(formulaString), y)
prediction <- predict(fit)
prediction
test$Sequence[j]
order <- 2
    for (i in 2:order) {         formulaString <- paste0(formulaString, "+I(x^", i, ")")     }
formulaString
        fit <- lm(formula(formulaString), y)
        prediction <- predict(fit)
prediction
fit
fit
fit$res
fit$residuals
fit$coefficients } aste("---- Order ", order, " ----- ", Sys.time()))     formulaString <- "y ~ x"     for (i in 2:order) {         formulaString <- paste0(formulaString, "+I(x^", i, ")")     }     for (j in 1:(nrow(test))) {         if (j %% 1000 == 0)             print(j)         if (is.na(test$Solved[j])) {
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/PolynomialFit.R", encoding = "Windows-1252")
test$Solved <- null
test$Solved <- NULL
for (order in 1:10) {     print(paste("---- Order ", order, " ----- ", Sys.time()))     formulaString <- "y ~ x"     for (i in 2:order) {         formulaString <- paste0(formulaString, "+I(x^", i, ")")     }     for (j in 1:(nrow(test))) {         if (j %% 1000 == 0)             print(j)         if (is.na(test$Solved[j])) {             y <- data.frame(y = unlist(test$Sequence[j]), x = 1:length(test$Sequence[j]))             fit <- lm(formula(formulaString), y)             if (sum(abs(fit$residuals)) < nrow(test) / 2) {                 test$Solved[j] = "Polyfit"                 test$Formula[j] = fit$coefficients                 #prediction <- predict(fit)             }
        }     } }
