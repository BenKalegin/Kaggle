result = FALSE
}
rec2 <- lapply(sequences, isRecurrent, depth = 2)
isRecurrent <- function(x, depth) {
s <- solveRecurrent(x, depth = depth, offset = 1)
result = TRUE
if (!anyNA(s)) {
for(i in (depth+1):(length(x) - depth)) {
value <- 0
for (j in 1:depth) {
value <- value + x[i+j-1] * s[j]
}
if (is.na(x[i+depth]) | value != x[i+depth]) {
result = FALSE
break;
}
}
}else
result = FALSE
}
rec2 <- lapply(sequences, isRecurrent, depth = 2)
sequences[rec == TRUE]
sequences[rec2 == TRUE]
rec2
isRecurrent <- function(x, depth) {
s <- solveRecurrent(x, depth = depth, offset = 1)
result = TRUE
if (!anyNA(s)) {
for(i in (depth+1):(length(x) - depth)) {
value <- 0
for (j in 1:depth) {
value <- value + x[i+j-1] * s[j]
}
if (is.na(x[i+depth]) || value != x[i+depth]) {
result = FALSE
break;
}
}
}else
result = FALSE
}
isRecurrent <- function(x, depth) {
s <- solveRecurrent(x, depth = depth, offset = 1)
result = TRUE
if (!anyNA(s)) {
for(i in (depth+1):(length(x) - depth)) {
value <- 0
for (j in 1:depth) {
value <- value + x[i+j-1] * s[j]
}
if (is.na(x[i+depth]) || value != x[i+depth]) {
result = FALSE
break;
}
}
}else
result = FALSE
result
}
rec2 <- lapply(sequences, isRecurrent, depth = 2)
?solve
sequences[rec2 == TRUE]
sum(rec2 == TRUE)
sum(rec2 == FALSE)
rec3 <- lapply(sequences, isRecurrent, depth = 3)
sum(rec3 == TRUE)
sequences[rec3 == TRUE]
rec4 <- lapply(sequences, isRecurrent, depth = 4)
sequences[rec4 == TRUE]
sum(rec4 == TRUE)
sum(rec3 == TRUE)
sum(rec2 == TRUE)
train <- read.csv("../input/train.csv", stringsAsFactors = FALSE, nrow = 1000000)
sequences <- lapply(strsplit(train$Sequence, split = ","), FUN = as.numeric)
rec2 <- lapply(sequences, isRecurrent, depth = 2)
sum(rec2 == TRUE)
solveRecurrent <- function(x, depth, offset) {     A <- matrix(0, nrow = depth, ncol = depth)     b <- matrix(0, nrow = depth, ncol = 1)     for (r in 1:depth) {          for (c in 1:depth) {             A[r, c] <- x[offset + (r - 1) + (c-1)]         }         b[r] <- x[offset + depth + (r-1)]      }     result <- try(round(solve(A, b)));     if ("matrix" != class(result)) {         result <- matrix(NA, nrow = depth, ncol = 1);     }     t(result) }
isRecurrent <- function(x, depth) {     s <- solveRecurrent(x, depth = depth, offset = 1)     result = TRUE     if (!anyNA(s)) {       for(i in (depth+1):(length(x) - depth)) {         value <- 0         for (j in 1:depth) {           value <- value + x[i+j-1] * s[j]             }         if (is.na(x[i+depth]) || value != x[i+depth]) {           result = FALSE           break;         }       }     }else       result = FALSE     result }
x11 <- c(1, 1, 2, 3, 5)
isRecurrent(x11, depth = 2)
train <- read.csv("../input/train.csv", stringsAsFactors = FALSE, nrow = 1000000)
sequences <- lapply(strsplit(train$Sequence, split = ","), FUN = as.numeric)
train <- read.csv("../input/train.csv", stringsAsFactors = FALSE, nrow = 1000) sequences <- lapply(strsplit(train$Sequence, split = ","), FUN = as.numeric)
system.time(rec4 <- lapply(sequences, isRecurrent, depth = 4))
train <- read.csv("../input/train.csv", stringsAsFactors = FALSE, nrow = 10000) sequences <- lapply(strsplit(train$Sequence, split = ","), FUN = as.numeric)
system.time(rec4 <- lapply(sequences, isRecurrent, depth = 4))
sum(rec4)
rec4
sum(rec4 == TRUE)
isRecurrent <- function(x, depth) {     s <- solveRecurrent(x, depth = depth, offset = 1)     result = TRUE     if (!anyNA(s)) {       for(i in (depth+1):(length(x) - depth)) {         value <- 0         for (j in 1:depth) {           value <- value + x[i+j-1] * s[j]             }         if (is.na(x[i+depth]) || abs(value - x[i+depth]) < 0.01 ) {           result = FALSE           break;         }       }     }else       result = FALSE     result }
system.time(rec4 <- lapply(sequences, isRecurrent, depth = 4)) # 1.7 on 10000
sum(rec4 == TRUE)
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) testseq <- lapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
length(testseq)
test2 <- lapply(testseq, isRecurrent, depth = 2)
length(test2)
sum(test2 == TRUE)
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$Sequence <- as.numeric(strsplit(test$Sequence, split = ","))
test$Sequence <- lapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
test$Solve2 <- lapply(test$Sequence, FUN = solveRecurrent, depth = 2)
solveRecurrent <- function(x, depth) {     A <- matrix(0, nrow = depth, ncol = depth)     b <- matrix(0, nrow = depth, ncol = 1)     for (r in 1:depth) {          for (c in 1:depth) {             A[r, c] <- x[1 + (r - 1) + (c-1)]         }         b[r] <- x[1 + depth + (r-1)]      }     result <- try(round(solve(A, b)));     if ("matrix" != class(result)) {         result <- matrix(NA, nrow = depth, ncol = 1);     }     t(result) }
test$Solve2 <- lapply(test$Sequence, FUN = solveRecurrent, depth = 2)
head(test$Solve2)
head(test)
test[3]
test[[3]]
test[3,]
str(test[3,])
test$Check2 <- isRecurrent(test$Sequence, 2, test$Solve2)
isRecurrent <- function(x, depth, s) {     result = TRUE     if (!anyNA(s)) {       for(i in (depth+1):(length(x) - depth)) {         value <- 0         for (j in 1:depth) {           value <- value + x[i+j-1] * s[j]             }         if (is.na(x[i+depth]) || abs(value - x[i+depth]) < 0.01 ) {           result = FALSE           break;         }       }     }else       result = FALSE     result }
test$Check2 <- isRecurrent(test$Sequence, 2, test$Solve2)
test$Check2 <- isRecurrent(test$Sequence, 2, test$Solve2)
test$Check2 <- lapply(test$Sequence, FUN = isRecurrent, depth = 2, s = test$Solve2)
test$Check2 <- mapply(isRecurrent, test$Sequence, 2, test$Solve2)
sum(test$Check2 == TRUE)
sum(test$Check2 == FALSE)
head(test, 100)
test[2,]
isRecurrent <- function(x, depth, s) {     result = TRUE     if (!anyNA(s)) {       for(i in (depth+1):(length(x) - depth)) {         value <- 0         for (j in 1:depth) {           value <- value + x[i+j-1] * s[j]             }         if (is.na(x[i+depth]) || abs(value - x[i+depth]) > 0.01 ) {           result = FALSE           break;         }       }     }else       result = FALSE     result }
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$Sequence <- lapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
length(testseq) == 113845
test$Solve2 <- lapply(test$Sequence, FUN = solveRecurrent, depth = 2)
test$Check2 <- mapply(isRecurrent, test$Sequence, 2, test$Solve2)
sum(test$Check2 == TRUE)
sum(test$Check2 == FALSE)
test[test$Check2 == TRUE,]
head(test[test$Check2 == TRUE,])
predictNext <- function(x, depth, s) {     i <- length(x) - depth;     value <- 0     for (j in 1:depth) {         value <- value + x[i + j - 1] * s[j]     }     value }
test[44,]
test[44]$Sequence
test[44,]$Sequence
predictNext(test[44,]$Sequence, 2, test[44,]$Solve2)
test[44,]$Solve2
test[44,]$Solve2[1]
test[44,]$Solve2[2]
class(test[44,]$Solve2)
class(test$     )
class(test$Solve2)
class(test$Solve2[1])
class(test$Solve2[1][1])
class(test$Solve2[1][1][1])
solveRecurrent <- function(x, depth) {     A <- matrix(0, nrow = depth, ncol = depth)     b <- matrix(0, nrow = depth, ncol = 1)     for (r in 1:depth) {          for (c in 1:depth) {             A[r, c] <- x[1 + (r - 1) + (c-1)]         }         b[r] <- x[1 + depth + (r-1)]      }     result <- try(round(solve(A, b)));     if ("matrix" != class(result)) {         result <- matrix(NA, nrow = depth, ncol = 1);     }     t(result)[1,] }
isRecurrent <- function(x, depth, s) {     result = TRUE     if (!anyNA(s)) {       for(i in (depth+1):(length(x) - depth)) {         value <- 0         for (j in 1:depth) {           value <- value + x[i+j-1] * s[j]             }         if (is.na(x[i+depth]) || abs(value - x[i+depth]) > 0.01 ) {           result = FALSE           break;         }       }     }else       result = FALSE     result }
test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000)
test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
test$Solve2 <- lapply(test$Sequence, FUN = solveRecurrent, depth = 2)
test$Check2 <- mapply(isRecurrent, test$Sequence, 2, test$Solve2)
predictNext(test[44,]$Sequence, 2, test[44,]$Solve2)
test[44,]$Solve2
test[44,]$Solve2[1]
test[44,]$Solve2[[1]]
predictNext(test[44,]$Sequence, 2, test[44,]$Solve2[[1]])
predictNext(test[44,]$Sequence[[1]], 2, test[44,]$Solve2[[1]])
test[44,]
predictNext <- function(x, depth, s) {     i <- length(x) - depth + 1;     value <- 0     for (j in 1:depth) {         value <- value + x[i + j - 1] * s[j]     }     value }
predictNext(test[44,]$Sequence[[1]], 2, test[44,]$Solve2[[1]])
test$Predict <- NA
test[test$Check2 == TRUE,]$Predict <- predictNext(test[test$Check2 == TRUE,]$Sequence[[1]], 2, test[test$Check2 == TRUE,]$Solve2[[1]])
test$Predict[!is.na(test$Predict)]
test[test$Check2 == TRUE,]$Predict <- predictNext(test[test$Check2 == TRUE,]$Sequence, 2, test[test$Check2 == TRUE,]$Solve2)
testPredict <- mapply(predictNext, test$Sequence, 2, test$Solve2)
test$Predict[!is.na(test$Predict)]
sum(!is.na(test$Predict))
test[!is.na(test$Predict),]
test$Predict <- mapply(predictNext, test$Sequence, 2, test$Solve2)
test[!is.na(test$Predict),]
test$Predict <- mapply(predictNext, test$Sequence, 2, test$Solve2)
test$Predict <- NA
test$Predict <- mapply(predictNext, test$Sequence, 2, test$Solve2)
sum(!is.na(test$Predict))
sum(!is.na(test$Solve2))
test$Check2 <- mapply(isRecurrent, test$Sequence, 2, test$Solve2, test$Check2)
predictNext <- function(x, depth, s, isRecurrent) {     if (isRecurrent) {         i <- length(x) - depth + 1;         value <- 0         for (j in 1:depth) {             value <- value + x[i + j - 1] * s[j]         }     } else         value <- NA     value }
test$Check2 <- mapply(isRecurrent, test$Sequence, 2, test$Solve2, test$Check2)
test$Predict <- mapply(predictNext, test$Sequence, 2, test$Solve2, test$Check2)
sum(!is.na(test$Solve2))
sum(is.na(test$Solve2))
sum(!is.na(test$Predict))
head(test[test$Check2 == TRUE,])
colnames(test)[2]
colnames(test)[5]
colnames(test)[5] <- "Last"
submit2 <- test[test$Check2 == TRUE, c("Id", "Last")]
length(submit2)
head(submit2)
write.csv(submit2, "../input/recurrent2.csv")
write.csv(submit2, "../output/recurrent2.csv")
colnames(submit2)
colnames(submit2[1])
write.csv(submit2, "../output/recurrent2.csv")
write.csv2(submit2, "../output/recurrent2.csv")
write.csv(submit2, "../output/recurrent2.csv", row.names = FALSE)
test$Last <- mapply(predictNext, test$Sequence, 2, test$Solve2, test$Check2) test$Last <- as.integer(test$Last)
test$Last <- lapply(test$Last, function(x) { if (x < 1E8) as.integer(x) else x } test$Last <- lapply(test$Last, function(x) { if (x < 1E8) as.integer(x) else x }) test$Last <- mapply(predictNext, test$Sequence, 2, test$Solve2, test$Check2) test$Last <- lapply(test$Last, function(x) { if (x < 1E8) as.integer(x) else x })
test$Last <- mapply(predictNext, test$Sequence, 2, test$Solve2, test$Check2)
test$Last <- lapply(test$Last, function(x) { if (x < 1E8) { x = as.integer(x) } x })
test$Last <- lapply(test$Last, function(x) { if (x < 100000000) { x = as.integer(x) } x })
test$Last <- lapply(test$Last, function(x) {      if (x < 100000000)
x = as.integer(x)
x
} )
test$Last <- lapply(test$Last, function(x) {      if (x < 100000000)
x = as.integer(x)
x
})
x <- 1e8
class(x)
as.in
as.integer(x)
class(as.integer(x))
test$Last <- mapply(predictNext, test$Sequence, 2, test$Solve2, test$Check2) test$Last <- lapply(test$Last, function(x) {      y <- try(as.integer(x))
if (class(y) != "integer")
y <- x
y
})
warnings()
test$Last <- mapply(predictNext, test$Sequence, 2, test$Solve2, test$Check2) test$Last <- lapply(test$Last, function(x) {     y <- suppressWarnings(try(as.integer(x)))
if (class(y) != "integer")
y <- x
y
})
submit2 <- test[test$Check2 == TRUE, c("Id", "Last")] write.csv(submit2, "../output/recurrent2.csv", row.names = FALSE)
test$Last <- lapply(test$Last, function(x) {     y <- suppressWarnings(try(as.integer(x)))
if (class(y) != "integer")
y <- x
y
})
submit2 <- test[test$Check2 == TRUE, c("Id", "Last")]
colnames(submit2[1])
colnames(test]) colnames(test) colnames(test) ) colnames(test) }
test$Last <- lapply(test$Last, function(x) {     y <- suppressWarnings(try(as.integer(x)))
if (class(y) != "integer")
y <- x
y
})
test$Last
source("D:\\prj\\Kaggle\\Integer Sequence Learning\\scripts\\Recurrence Equation Solve.R", encoding = "Windows-1252")
submit2 <- test[test$Check2 == TRUE, c("Id", "Last")]
source("D:\\prj\\Kaggle\\Integer Sequence Learning\\scripts\\Recurrence Equation Solve.R", encoding = "Windows-1252")
debugSource('D:/prj/Kaggle/Integer Sequence Learning/scripts/Recurrence Equation Solve.R')
test <- load(file = "../output/temp62.rda")
for (i in 2:62) {
test[[paste("Last", i)]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, i, test[[paste("Solve", i)]], test[[paste("Check", i)]])
}
for (i in 2:62) {
test[[paste("Last", i)]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, i, test[[paste("Solve", i)]], test[[paste("Check", i)]])
}
head(test)
test[1,]
dim(test)
View(test)
rm(test)
load(file = "../output/temp62.rda")
head(test)
for (i in 2:62) {
test[[paste("Last", i)]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, i, test[[paste("Solve", i)]], test[[paste("Check", i)]])
}
dim(test)
dim(test)[1]
rep(i,2)
for (i in 2:62) {
test[[paste("Last", i)]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, rep(i,dim(test)[1]), test[[paste("Solve", i)]], test[[paste("Check", i)]])
}
test[[paste("Last", 2)]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, 2, test$Solve2, test[["Check2"]])
test[[paste("Last", 2)]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, 2, test[["Solve2"]], test[["Check2"]])
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
test[[cLast]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, rep(i,dim(test)[1]), test[[cSolve]], test[[cCheck]])
}
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
depths <- rep(i,dim(test)[1])
test[[cLast]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, depths, test[[cSolve]], test[[cCheck]])
}
test[[paste("Last", 2)]] <- mapply(FUN = predictNext, SIMPLIFY = TRUE, test$Sequence, 2, test[["Solve2"]], test[["Check2"]])
test[[paste("Last", 3)]] <- mapply(FUN = predictNext, SIMPLIFY = TRUE, test$Sequence, 3, test[["Solve3"]], test[["Check3"]])
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
depths <- rep(i,dim(test)[1])
test[[cLast]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, i, test[[cSolve]], test[[cCheck]])
}
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
depths <- rep(i,dim(test)[1])
test[[cLast]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, depths, test[[cSolve]], test[[cCheck]])
}
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
test$depth <- i
test[[cLast]] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, test$depth, test[[cSolve]], test[[cCheck]])
}
head(test$depth)
head(test$Sequence)
test[,paste("Last", 2)] <- predictNext(test[,"Sequence"], 2, test[, "Solve3"], test[,"Check3"])
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
test$depth <- i
test[,cLast] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, test$depth, test[,cSolve], test[,cCheck])
}
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
test$depth <- i
test[,cLast] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, test$depth, test[,cSolve], test[,cCheck])
}
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
test$depth <- i
test[,cLast] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, test$depth, test[,cSolve], test[,cCheck])
}
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
test$depth <- i
test[,cLast] <- mapply(predictNext, SIMPLIFY = TRUE, test$Sequence, test$depth, test[,cSolve], test[,cCheck])
}
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
test$depth <- i
test[,cLast] <- mapply(predictNext, SIMPLIFY = TRUE, test[,"Sequence"], test[,"depth"], test[,cSolve], test[,cCheck])
}
debugSource('D:/prj/Kaggle/Integer Sequence Learning/scripts/Recurrence Equation Solve.R')
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
test$depth <- i
test[,cLast] <- mapply(predictNext, SIMPLIFY = TRUE, test[,"Sequence"], test[,"depth"], test[,cSolve], test[,cCheck])
}
for (i in 2:2) {
cSolve <- paste("Solve", i)
cCheck <- paste("Check", i)
cLast <- paste("Last", i)
test$depth <- i
test[,cLast] <- mapply(predictNext, SIMPLIFY = TRUE, test[,"Sequence"], test[,"depth"], test[,cSolve], test[,cCheck])
}
SWIRL()
swirl()
library(swirl)
siwrl()
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
names(pm0)
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
sum(is.na(x0))
mean(is.na(x0))
names(pm2) <- make.names(cnames[[1]][wcol])
wcol
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1)
)
negative <- x1 < 0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
str(dates)
head(dates)
hist(dates[negative], month)
hist(dates[negative], "month")
str(site0)
intersect(site0, site1)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 % country.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 & country.site %in% both)
cnt0 <- subset(pm0, pm0$State.Code == 36 & pm0$country.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(h = median(x0sub))
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE), lwd = 2)
rng <- range(x0sub,x1sub, na.rm = TRUE)
rng
mn0 <- using(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d0
d1 <- data.frame(state = names(mn1), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim(mgr)
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5, 2.5)))
with(mrg, plot(rep(2,52), mrg[,3], xlim = c(.5, 2.5)))
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2,52), mrg[,3], xlim = c(.5, 2.5)))
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1, 52), mrg[,2], re(2, 53), mrg[,3])
segments(rep(1, 52), mrg[,2], rep(2, 53), mrg[,3])
segments(rep(1, 52), mrg[,2], rep(2, 52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y,]
c(0, 9, 720) %*% c(80, -80, 1)
c(0, 9, 720) %*% t(c(80, -80, 1))
c(0, 9, 720) %*% (c(80, -80, 1)
c(0, 9, 720) %*% c(80, -80, 1)
c(0, 9, 720) * c(80, -80, 1)
c(0, 9, 720) %*% c(80, -80, 1)
t(c(0, 9, 720)) %*% c(80, -80, 1)
sum(c(0, 9, 720) * c(80, -80, 1))
c(9, 720, 56880) %*% c(80, -80, 1)
c(9, 720, 56880) %*% rev(c(80, -80, 1))
c(9, 720, 56880) %*% rev(c(80, -80, 1))
hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
h8 <- hilbert(8);
h8
c1 <- c(1, 2, 7, 16, 29, 46)
diff(c1)
diff(diff(c1))
m <- matrix(c(7, 8, 12, 8, 12, 19, 12, 19, 29), nrow = 3, ncol = 3, byrow = TRUE)
solve(m)
m <- matrix(c(7, 8, 8, 12), nrow = 2, ncol = 2, byrow = TRUE)
A <- matrix(c(7, 8, 8, 12), nrow = 2, ncol = 2, byrow = TRUE)
b <- c(12, 19)
solve(A, b)
7 * (-0.4) + 8 * 1.85
8 * (-0.4) + 12 * 1.85
diff(diff(diff(c1)))
diff(diff(diff(c1))) == 0
all(diff(diff(diff(c1))) == 0)
head(test)
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000)
test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
test$diff1 <- all(diff(diff(diff(test$Sequence))) == 0)1
all(head(test$Sequence)) == 0)
all(head(test$Sequence) == 0)
lapply(head(test$Sequence), function (x) all(x ==0))
sapply(head(test$Sequence), function (x) all(x ==0))
test$diff1 <- sapply(test$Sequence, function (x) all(diff(x)==0))
sum(test$diff1)
test$diff1 <- sapply(test$Sequence, function (x) all(diff(x)!=0)) & all(diff(diff(x)) ==0))
test$diff1 <- sapply(test$Sequence, function (x) all(diff(x)!=0) & all(diff(diff(x)) ==0))
test$diff1 <- sapply(test$Sequence, function (x) all(diff(x)==0))
test$diff2 <- sapply(test$Sequence, function (x) all(diff(x)!=0) & all(diff(diff(x)) ==0))
sum(test$diff2)
sum(test$diff1)
test$diff3 <- sapply(test$Sequence, function (x) all(diff(x)!=0) & all(diff(diff(x))!=0) & all(diff(diff(diff(x))==0))
)
sum(test$diff3)
test$diff3 <- sapply(test$Sequence, function (x) all(diff(x)!=0) & all(diff(diff(x))!=0) & all(diff(diff(diff(x)))==0))
sum(test$diff3)
test$diff4 <- sapply(test$Sequence, function (x) all(diff(x)!=0) & all(diff(diff(x))!=0) & all(diff(diff(diff(x)))!=0) & all(diff(diff(diff(diff(x)))==0))
)
diffn <- function(x, n) { result <- x; for (i in 1:n) result <- diff(result) }
test$diff4 <- sapply(test$Sequence, function (x) all(diffn(x, 4)))
sum(test$diff3)
test$diff5 <- sapply(test$Sequence, function (x) all(diffn(x, 5)))
sum(test$diff5)
sum(test$diff4)
test$diff3 <- sapply(test$Sequence, function (x) all(diffn(x, 3)))
sum(test$diff3)
diffn <- function(x, n) { result <- x; for (i in 1:n) result <- diff(result); all(result == 0) }
test$diff3 <- sapply(test$Sequence, function (x) diffn(x, 3))
sum(test$diff3)
test$diff4 <- sapply(test$Sequence, function (x) diffn(x, 4))
sum(test$diff4)
test$diff5 <- sapply(test$Sequence, function (x) diffn(x, 5))
sum(test$diff5)
test$diff6 <- sapply(test$Sequence, function (x) diffn(x, 6))
sum(test$diff6)
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
library(gmp)
x1 <- as.bigz("123456789123456789123456789")
x2 <- as.bigz("123456789123456789123456788")
x1 == x2
x1 - x2
as.numreic(x1) - as.numeric(x2)
as.numeric(x1) - as.numeric(x2)
x2 <- as.bigz("12345678912345678912345678.8")
x2
x2 <- as.bigz("123456789123456789123456788")
x2
x2 <- as.bigz("123456789123456789123456788")
q2 <- as.bigz("12345678912345678912345678.8")
as.bigz(q2)
q2
q2 <- as.bigq("12345678912345678912345678.8")
q2
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
i
 test[[n("Check", i)]] <- mapply(isRecurrent, test$BigSequence, i, test[[n("Solve", i)]])
    test[[n("Check", i)]] <- mapply(isRecurrent, test$BigSequence, i, test[[n("Solve", i)]])
isRecurrent <- function(x, depth, s) {     result = TRUE     if (!anyNA(s)) {         for (i in (depth + 1):(length(x) - depth)) {             value <- as.bigz(0)             for (j in 1:depth) {                 value <- add.bigz(value, div.bigz(x[i + j - 1] * as.bigz(round(s[j] * 10)), as.bigz(10)))             }             value <- value + as.bigz(round(s[j + 1]))             if (is.na(value))                 stop()             if ( value != x[i + depth]) {                 result = FALSE                 break;             }         }     } else         result = FALSE     result }
head(test$big)
head(test$BigSequence)
test[1438,]
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
library(gmp)
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
solversolveRecurrent <- function(x, depth, takeLast = TRUE) {     A <- matrix(NA, nrow = depth + 1, ncol = depth + 1, byrow = TRUE)     b <- matrix(NA, nrow = depth + 1, ncol = 1)     offset <- 1     if (takeLast == TRUE)        offset <- length(x) - 2 * depth       if (offset < 1) {       result <- matrix(NA, nrow = depth, ncol = 1);     } else {         for (r in 1:(depth + 1)) {             for (c in 1:depth) {                 if (offset + (r - 1) + (c - 1) > length(x)) {                     xxx <- 1;                     stop();                 }                 A[r, c] <- x[offset + (r - 1) + (c - 1)]             }             A[r, depth + 1] <- 1             b[r] <- x[offset + depth + (r - 1)]         }         result <- try(round(solve(A, b), 1));         if ("matrix" != class(result)) {             result <- matrix(NA, nrow = depth, ncol = 1);         }     }     t(result)[1,] } isRecurrent <- function(x, depth, s) {     result = TRUE     if (!anyNA(s)) {         for (i in (depth + 1):(length(x) - depth)) {             value <- as.bigz(0)             for (j in 1:depth) {                 value <- add.bigz(value, div.bigz(x[i + j - 1] * as.bigz(round(s[j] * 10)), as.bigz(10)))             }             value <- value + as.bigz(round(s[j + 1]))             if (is.na(value))                 stop()             if ( value != x[i + depth]) {                 result = FALSE                 break;             }         }     } else         result = FALSE     result } predictNext <- function(x, depth, s, isRecurrent) {     if (isRecurrent) {         i <- length(x) - depth + 1;         value <- as.bigz(0)         for (j in 1:depth) {             value <- add.bigz(value, div.bigz(x[i + j - 1] * as.bigz(round(s[j] * 10)), as.bigz(10)))         }         value <- value + as.bigz(round(s[j + 1]))         if (is.na(value))             stop()     } else         value <- NA     as.character(value) }
solver
solversolveRecurrent(test$Sequence[1438], 1, TRUE)
solversolveRecurrent(test$Sequence[1438], 1, FALSE)
solversolveRecurrent(unlist(test$Sequence[1438]), 1, FALSE)
solversolveRecurrent(unlist(test$Sequence[1438]), 1, TRUE)
test$Sequence[1438]
test$Id[1438]
solversolveRecurrent(unlist(test$Sequence[1438]), 1, FALSE)
isRecurrent(unlist(test$b[1438]))
isRecurrent(unlist(test$BigSequence[1438]), 1, solversolveRecurrent(unlist(test$Sequence[1438]), 1, FALSE))
isRecurrent(unlist(test$BigSequence[1438]), 1, solversolveRecurrent(unlist(test$Sequence[1438]), 1, FALSE)library(gmp) solveRecurrent <- function(x, depth, takeLast = TRUE) {     A <- matrix(NA, nrow = depth + 1, ncol = depth + 1, byrow = TRUE)     b <- matrix(NA, nrow = depth + 1, ncol = 1)     offset <- 1     if (takeLast == TRUE)        offset <- length(x) - 2 * depth       if (offset < 1) {       result <- matrix(NA, nrow = depth, ncol = 1);     } else {         for (r in 1:(depth + 1)) {             for (c in 1:depth) {                 if (offset + (r - 1) + (c - 1) > length(x)) {                     xxx <- 1;                     stop();                 }                 A[r, c] <- x[offset + (r - 1) + (c - 1)]             }             A[r, depth + 1] <- 1             b[r] <- x[offset + depth + (r - 1)]         }         result <- try(round(solve(A, b), 1));         if ("matrix" != class(result)) {             result <- matrix(NA, nrow = depth, ncol = 1);         }     }     t(result)[1,] } isRecurrent <- function(x, depth, s) {     result = TRUE     if (!anyNA(s)) {         for (i in (depth + 1):(length(x) - depth)) {             value <- as.bigz(0)             for (j in 1:depth) {                 value <- add.bigz(value, div.bigz(x[i + j - 1] * as.bigz(round(s[j] * 10)), as.bigz(10)))             }             value <- value + as.bigz(round(s[j + 1]))             if (is.na(value))                 stop()             if ( value != x[i + depth]) {                 result = FALSE                 break;             }         }     } else         result = FALSE     result } predictNext <- function(x, depth, s, isRecurrent) {     if (isRecurrent) {         i <- length(x) - depth + 1;         value <- as.bigz(0)         for (j in 1:depth) {             value <- add.bigz(value, div.bigz(x[i + j - 1] * as.bigz(round(s[j] * 10)), as.bigz(10)))         }         value <- value + as.bigz(round(s[j + 1]))         if (is.na(value))             stop()     } else         value <- NA     as.character(value) } )
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
sink()
unlink("../output/iterations.txt")
which[test$Id == 1438]
which[test$Id == 1438,]
which([test$Id == 1438]) ) ] }
which(test$Id == 1438)
test[711]
test[711,]
which(test$Id == 405)
test[201]
test[201,]
solveRecurrent(test$Sequence[201], 2, TRUE)
solveRecurrent(test$Sequence[201], 2, TRUE)
length(x)
nrow(x)
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
solveRecurrent(test$Sequence[201], 2, TRUE)
solveRecurrent(test$Sequence[201], 2, TRUE)
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
solveRecurrent(test$Sequence[201], 2, TRUE)
solveRecurrent(test$Sequence[201], 2, TRUE)
rtvs::debug_source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
length(x)
length(x)
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
solveRecurrent(test$s )
solveRecurrent(test$Sequence, 2, TRUE)
length(x)
test[test$Id == 405,]
test[201,]
solveRecurrent(test$Sequence[201], 2, TRUE)
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
solveRecurrent(test$Sequence[201], 2, TRUE)
length(x)
A
solveRecurrent <- function(x, depth, takeLast = TRUE) {     x = unlist(x)     A <- matrix(NA, nrow = depth + 1, ncol = depth + 1, byrow = TRUE)     b <- matrix(NA, nrow = depth + 1, ncol = 1)     offset <- 1     if (takeLast == TRUE)        offset <- length(x) - 2 * depth       if (length(x) - 2 * depth < 1)  {       result <- matrix(NA, nrow = depth, ncol = 1);     } else {         for (r in 1:(depth + 1)) {             for (c in 1:depth) {                 if (offset + (r - 1) + (c - 1) > length(x)) {                     xxx <- 1;                     stop();                 }                 A[r, c] <- x[offset + (r - 1) + (c - 1)]             }             A[r, depth + 1] <- 1             b[r] <- x[offset + depth + (r - 1)]         }         solved <- try(solve(A, b))         if ("matrix" != class(result))             result <- matrix(NA, nrow = depth, ncol = 1)         else             result <- try(round(solved, 1));     }     t(result)[1,] }
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
solveRecurrent(test[201], 2, TRUE)
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz) test$BigSequence <- sapply(test$BigSequence, FUN = unlist) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric) test$Sequence <- sapply(test$Sequence, FUN = unlist)
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
solveRecurrent(test[201], 2, TRUE)
solveRecurrent(test$Sequence[201], 2, TRUE)
exp62 <- read.csv("../output/recurrent62.csv") exp4 <- read.csv("../output/recurrent-exp4.csv") exp462 <- exp62[exp62$Last != exp4$Last & exp4$Last == 0,] write.csv(exp462, "../output/exp4-62.csv", row.names = TRUE)
library(gmp) solveRecurrent <- function(x, depth, takeLast = TRUE) {     x <- unlist(x)     if (length(x) - 2 * depth < 1) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         A <- matrix(NA, nrow = depth + 1, ncol = depth + 1, byrow = TRUE)         b <- matrix(NA, nrow = depth + 1, ncol = 1)         offset <- 1         if (takeLast == TRUE) {             offset <- length(x) - 2 * depth             while ((offset > 1) & (abs(x[offset]) > 1e4)) offset <- offset - 1         }         for (r in 1:(depth + 1)) {             for (c in 1:depth) {                 if (offset + (r - 1) + (c - 1) > length(x)) {                     xxx <- 1;                     stop();                 }                 A[r, c] <- x[offset + (r - 1) + (c - 1)]             }             A[r, depth + 1] <- 1             b[r] <- x[offset + depth + (r - 1)]         }         solved <- try(solve(A, b))         if ("matrix" != class(solved))             result <- matrix(NA, nrow = depth, ncol = 1)         else             result <- round(solved, 1);     }     t(result)[1,] } lmRecurrent <- function(x, depth, takeLast = TRUE) {     x <- unlist(x)     if (length(x) - depth < 1) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         if (takeLast) {             df <- data.frame(y = tail(x, - depth))         }         formulaString <- "y~"         for (i in 1:depth) {             df[[paste0("x", i)]] <- x[i:(length(x) - depth + i - 1)]             formulaString <- paste0(formulaString, "+x", i)         }         formulaString <- sub("~\\+", "~", formulaString)         fit <- lm(formula(formulaString), df)         maxResidual <- max(abs(fit$residuals))         df <- list()         for(i in 1:depth)         {             df[[paste0("x",i)]] <- x[length(x)-depth+i]         }         df <- as.data.frame(df)         prediction <- predict(fit, df)         prediction <- round(prediction)     }     prediction } isRecurrent <- function(x, depth, s) {     result = TRUE     if (!anyNA(s)) {         for (i in (depth + 1):(length(x) - depth)) {             value <- as.bigz(0)             for (j in 1:depth) {                 value <- add.bigz(value, div.bigz(x[i + j - 1] * as.bigz(round(s[j] * 10)), as.bigz(10)))             }             value <- value + as.bigz(round(s[j + 1]))             if (is.na(value))                 stop()             if ( value != x[i + depth]) {                 result = FALSE                 break;             }         }     } else         result = FALSE     result } predictNext <- function(x, depth, s, isRecurrent) {     if (isRecurrent) {         i <- length(x) - depth + 1;         value <- as.bigz(0)         for (j in 1:depth) {             value <- add.bigz(value, div.bigz(x[i + j - 1] * as.bigz(round(s[j] * 10)), as.bigz(10)))         }         value <- value + as.bigz(round(s[j + 1]))         if (is.na(value))             stop()     } else         value <- NA     as.character(value) }
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
x <- test[2,]
solveRecurrent(x, 3, FALSE)
solveRecurrent(x, 2, FALSE)
solveRecurrent(x, 2, TRUE)
solveRecurrent(x, 3, TRUE)
head(x,3) %*% c(-2, 3, 2)
unlist(head(x,3)) %*% c(-2, 3, 2)
unlist(head(x,3))
x$Sequence <- test[2,]
x$Sequence <- unlist(test[2,])
head(x,3) %*% c(-2, 3, 2)
head(x,3)
x <- unlist(test$Sequence[2])
head(x,3) %*% c(-2, 3, 2)
solveRecurrent(x, 3, FALSE)
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric) # length(testseq) == 113845 #test$Solve2 <- lapply(test$Sequence, FUN = solveRecurrent, depth = 2) #test$Check2 <- mapply(isRecurrent, test$Sequence, 2, test$Solve2) # sum(test$Check2 == TRUE) 2510 # sum(test$Check3 == TRUE) 2586 # sum(test$Check4 == TRUE) 2505 # sum(test$Check5 == TRUE) 1637 n <- function(prefix, number) {     paste(prefix, i, sep = "") } limitDepth <- 3 sink("../output/iterations.txt") maxDepth <- limitDepth for (i in 1:limitDepth) {     print(paste("---- iteration ", i, " ----- ", Sys.time()))     test[[n("Solve", i)]] <- sapply(test$Sequence, FUN = solveRecurrent, depth = i, takeLast = TRUE)     test[[n("Check", i)]] <- mapply(isRecurrent, test$BigSequence, i, test[[n("Solve", i)]])     found <- sum(test[[n("Check", i)]] == TRUE)     print(paste("---- found ", found, " ----- ", Sys.time()))     if (found == 0) {         maxDepth <- i         break;     } } sink() #unlink("../output/iterations.txt") for (i in 1:maxDepth) {     test[[n("Last", i)]] <- mapply(predictNext, SIMPLIFY = TRUE, test$BigSequence, i, test[[n("Solve", i)]], test[[n("Check", i)]]) } coalesce1a <- function(...) {     ans <- ..1     for (elt in list(...)[-1]) {         i <- which(is.na(ans))         ans[i] <- elt[i]     }     ans } test$Last <- NA for (cn in sapply(c(1:maxDepth), function(x) paste("Last", x, sep = ""))) {     test$Last <- coalesce1a(test$Last, test[[cn]]) } test$Last[is.na(test$Last)] <- 0  write.csv(test[, c("Id", "Last")], "../output/recurrent-exp4.csv", row.names = FALSE)
exp62 <- read.csv("../output/recurrent62.csv") exp4 <- read.csv("../output/recurrent-exp4.csv") exp462 <- exp62[exp62$Last != exp4$Last & exp4$Last == 0,] write.csv(exp462, "../output/exp4-62.csv", row.names = TRUE)
x <- unlist(test$Sequence[39])
x <- unlist(test$Sequence[39])
sink()
sink()
x
solveRecurrent(x, 8, FALSE)
solveRecurrent(x, 8, TRUE)
solveRecurrentOld <- function(x, depth) {     if (length(x) < depth + 1) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         A <- matrix(0, nrow = depth, ncol = depth)         b <- matrix(0, nrow = depth, ncol = 1)         for (r in 1:depth) {             for (c in 1:depth) {                 A[r, c] <- x[1 + (r - 1) + (c - 1)]             }             b[r] <- x[1 + depth + (r - 1)]         }         result <- try(round(solve(A, b)));         if ("matrix" != class(result)) {             result <- matrix(NA, nrow = depth, ncol = 1);         }     }     t(result)[1,] }
solveRecurrentOld(x, 8)
solveRecurrent(x, 8, FALSE)
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
solveRecurrent(x, 8, FALSE)
A
b
solveRecurrentOld(x, 8)
A
c(1, 2, 3, 4)[2:3] = c(5, 6)
x <- c(1, 2, 3, 4)
x[2:3] = c(5, 6)
x
solveRecurrent <- function(x, depth, takeLast = TRUE) {     x <- unlist(x)     if (length(x) - 2 * depth < 0) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         A <- matrix(NA, nrow = depth, ncol = depth, byrow = TRUE)         b <- matrix(NA, nrow = depth, ncol = 1)         offset <- 1         if (takeLast == TRUE) {             offset <- length(x) - 2 * depth - 1             while ((offset > 1) & (abs(x[offset]) > 1e4))                 offset <- offset - 1             }         for (r in 1:depth) {             A[r, 1:depth] <- x[offset + (r - 1) : offset + (r - 1) + depth-1]             b[r] <- x[offset + depth + (r - 1)]         }         solved <- try(solve(A, b))         if ("matrix" != class(solved))             result <- matrix(NA, nrow = depth, ncol = 1)         else             result <- round(solved, 1);         }     t(result)[1,] }
solveRecurrentNobias <- function(x, depth, takeLast = TRUE) {     x <- unlist(x)     if (length(x) - 2 * depth < 0) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         A <- matrix(NA, nrow = depth, ncol = depth, byrow = TRUE)         b <- matrix(NA, nrow = depth, ncol = 1)         offset <- 1         if (takeLast == TRUE) {             offset <- length(x) - 2 * depth - 1             while ((offset > 1) & (abs(x[offset]) > 1e4))                 offset <- offset - 1             }         for (r in 1:depth) {             A[r, 1:depth] <- x[offset + (r - 1) : offset + (r - 1) + depth-1]             b[r] <- x[offset + depth + (r - 1)]         }         solved <- try(solve(A, b))         if ("matrix" != class(solved))             result <- matrix(NA, nrow = depth, ncol = 1)         else             result <- round(solved, 1);         }     t(result)[1,] }
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
rtvs::debug_source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
test$solve
sum(test$Chekc)
sum(test$Chec)
sum(test$Check01)
sink()
sum(test$Check01)
sink()
sink()
sum(test$Check00)
sum(test$Check10)
sum(test$Check11)
rtvs::debug_source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
x <- unlist(test$Sequence[39])
x
sink()
sink()
sink()
sink()
sink()
x
for (i in 1:maxDepth) {     test$Last <- sapply(test, function(x) {         if (is.na(x$Last))             x$Last <- predictNext(x$BigSequence, i, test[[n("Solve0", i)]], test[[n("Check0", i)]], FALSE)         if (is.na(x$Last))             x$Last <- predictNext(x$BigSequence, i, test[[n("Solve1", i)]], test[[n("Check1", i)]], TRUE)     }) }
for (i in 1:maxDepth) {     test$Last <- sapply(test, function(x) {         if (is.na(x[["Last"]]))             x[["Last"]] <- predictNext(x$BigSequence, i, test[[n("Solve0", i)]], test[[n("Check0", i)]], FALSE)         if (is.na(x$Last))             x[["Last"]] <- predictNext(x$BigSequence, i, test[[n("Solve1", i)]], test[[n("Check1", i)]], TRUE)     }) }
test$Last <- NA
for (i in 1:maxDepth) {     test$Last <- sapply(test, function(x) {         if (is.na(x[["Last"]]))             x[["Last"]] <- predictNext(x$BigSequence, i, test[[n("Solve0", i)]], test[[n("Check0", i)]], FALSE)         if (is.na(x$Last))             x[["Last"]] <- predictNext(x$BigSequence, i, test[[n("Solve1", i)]], test[[n("Check1", i)]], TRUE)     }) }
for (i in 1:maxDepth) {     test$Last <- sapply(test, function(x) {         if (is.na(x[["Last"]]))             x[["Last"]] <- predictNext(x$BigSequence, i, test[[n("Solve0", i)]], test[[n("Check0", i)]], FALSE)         if (is.na(x$Last))             x[["Last"]] <- predictNext(x$BigSequence, i, test[[n("Solve1", i)]], test[[n("Check1", i)]], TRUE)     }) }
for (i in 1:maxDepth) {     test$Last <- sapply(test, function(x) {         if (is.na(x[["Last"]]))             x[["Last"]] <- predictNext(x$BigSequence, i, test[[n("Solve0", i)]], test[[n("Check0", i)]], FALSE)         if (is.na(x$Last))             x[["Last"]] <- predictNext(x$BigSequence, i, test[[n("Solve1", i)]], test[[n("Check1", i)]], TRUE)         x[["Last"]]     }) }
rtvs::debug_source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
exp62 <- read.csv("../output/recurrent62.csv") exp5 <- read.csv("../output/recurrent-exp5.csv") exp462 <- exp62[exp62$Last != exp5$Last & exp5$Last == 0,] write.csv(exp562, "../output/exp5-62.csv", row.names = TRUE)
exp62 <- read.csv("../output/recurrent62.csv") exp5 <- read.csv("../output/recurrent-exp5.csv") exp562 <- exp62[exp62$Last != exp5$Last & exp5$Last == 0,] write.csv(exp562, "../output/exp5-62.csv", row.names = TRUE)
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
library(gmp)
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
x <- unlist(test$Sequence[39])
x
solveRecurrentOld(x, 8)
solveRecurrentBias <- function(x, depth, takeLast = TRUE) {     x <- unlist(x)     if (length(x) - 2 * depth < 1) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         A <- matrix(NA, nrow = depth + 1, ncol = depth + 1, byrow = TRUE)         b <- matrix(NA, nrow = depth + 1, ncol = 1)         offset <- 1         if (takeLast == TRUE) {             offset <- length(x) - 2 * depth             while ((offset > 1) & (abs(x[offset]) > 1e4)) offset <- offset - 1         }         for (r in 1:(depth + 1)) {             A[r, 1:depth] <- x[(offset + (r - 1)) : (offset + (r - 1) + depth - 1)]             #for (c in 1:depth) A[r, c] <- x[offset + (r - 1) + (c - 1)]             A[r, depth + 1] <- 1             b[r] <- x[offset + depth + (r - 1)]         }         solved <- try(solve(A, b))         if ("matrix" != class(solved))             result <- matrix(NA, nrow = depth, ncol = 1)         else             result <- round(solved, 1);     }     t(result)[1,] } solveRecurrentNobias <- function(x, depth, takeLast = TRUE) {     x <- unlist(x)     if (length(x) - 2 * depth < 1) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         A <- matrix(NA, nrow = depth, ncol = depth, byrow = TRUE)         b <- matrix(NA, nrow = depth, ncol = 1)         offset <- 1         if (takeLast == TRUE) {             offset <- length(x) - 2 * depth             while ((offset > 1) & (abs(x[offset]) > 1e4))                 offset <- offset - 1             }         for (r in 1:depth) {             A[r, 1:depth] <- x[(offset + (r - 1)): (offset + (r - 1) + depth-1)]             b[r] <- x[offset + depth + (r - 1)]         }         solved <- try(solve(A, b))         if ("matrix" != class(solved))             result <- matrix(NA, nrow = depth, ncol = 1)         else             result <- round(solved, 1);         }     t(result)[1,] } solveRecurrentOld <- function(x, depth) {     if (length(x) < depth + 1) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         A <- matrix(0, nrow = depth, ncol = depth)         b <- matrix(0, nrow = depth, ncol = 1)         for (r in 1:depth) {             for (c in 1:depth) {                 A[r, c] <- x[1 + (r - 1) + (c - 1)]             }             b[r] <- x[1 + depth + (r - 1)]         }         result <- try(round(solve(A, b)));         if ("matrix" != class(result)) {             result <- matrix(NA, nrow = depth, ncol = 1);         }     }     t(result)[1,] } lmRecurrent <- function(x, depth, takeLast = TRUE) {     x <- unlist(x)     if (length(x) - depth < 1) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         if (takeLast) {             df <- data.frame(y = tail(x, - depth))         }         formulaString <- "y~"         for (i in 1:depth) {             df[[paste0("x", i)]] <- x[i:(length(x) - depth + i - 1)]             formulaString <- paste0(formulaString, "+x", i)         }         formulaString <- sub("~\\+", "~", formulaString)         fit <- lm(formula(formulaString), df)         maxResidual <- max(abs(fit$residuals))         df <- list()         for(i in 1:depth)         {             df[[paste0("x",i)]] <- x[length(x)-depth+i]         }         df <- as.data.frame(df)         prediction <- predict(fit, df)         prediction <- round(prediction)     }     prediction } isRecurrent <- function(x, depth, s, biased = FALSE) {     result = TRUE     if (!anyNA(s)) {         for (i in (depth + 1):(length(x) - depth)) {             value <- as.bigz(0)             for (j in 1:depth) {                 value <- add.bigz(value, div.bigz(x[i + j - 1] * as.bigz(round(s[j] * 10)), as.bigz(10)))             }             if (biased == TRUE)                 value <- value + as.bigz(round(s[j + 1]))             if (is.na(value))                 stop()             if ( value != x[i + depth]) {                 result = FALSE                 break;             }         }     } else         result = FALSE     result } predictNext <- function(x, depth, s, isRecurrent, biased = FALSE) {     if (isRecurrent) {         i <- length(x) - depth + 1;         value <- as.bigz(0)         for (j in 1:depth) {             value <- add.bigz(value, div.bigz(x[i + j - 1] * as.bigz(round(s[j] * 10)), as.bigz(10)))         }         if (biased == TRUE)             value <- value + as.bigz(round(s[j + 1]))         if (is.na(value))             stop()     } else         value <- NA     as.character(value) }
solveRecurrentOld(x, 8)
solveRecurrent(x, 8)
solveRecurrentNobias(x, 8)
rtvs::debug_source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
x <- unlist(test$Sequence[39])
solveRecurrentNobias(x, 8)
solveRecurrentNobias(x, 8)
x <- test$Sequence[39]
solveRecurrentNobias(x, 8)
solveRecurrentNobias(x, 8)
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
x <- test$Sequence[39]
solveRecurrentNobias(x, 8)
solveRecurrentNobias(x, 8)
length(x)
nrow(x)
?unlist
sink()
sink()
rtvs::debug_source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
x <- test$Sequence[39]
solveRecurrentNobias(x, 8)
solveRecurrentNobias(x, 8, takeLast = FALSE)
rtvs::debug_source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
rtvs::debug_source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
solveRecurrentNobias(x, 8, takeLast = FALSE)
solveRecurrentNobias(x, 8, takeLast = TRUE)
A <- matrix(NA, nrow = depth, ncol = depth, byrow = TRUE) b <- matrix(NA, nrow = depth, ncol = 1) offset <- 1 if (takeLast == TRUE) {     offset <- length(x) - 2 * depth     while ((offset > 1) & (abs(x[offset]) > 1e4))         offset <- offset - 1     } for (r in 1:depth) {     A[r, 1:depth] <- x[(offset + (r - 1)):(offset + (r - 1) + depth - 1)]     b[r] <- x[offset + depth + (r - 1)] }
A <- matrix(NA, nrow = depth, ncol = depth, byrow = TRUE)
depth <- 8
A <- matrix(NA, nrow = depth, ncol = depth, byrow = TRUE) b <- matrix(NA, nrow = depth, ncol = 1)
offset <- 1
for (r in 1:depth) {     A[r, 1:depth] <- x[(offset + (r - 1)):(offset + (r - 1) + depth - 1)]     b[r] <- x[offset + depth + (r - 1)] }
x[(offset + (r - 1)):(offset + (r - 1) + depth - 1)]
x <- unlist(x)
for (r in 1:depth) {     A[r, 1:depth] <- x[(offset + (r - 1)):(offset + (r - 1) + depth - 1)]     b[r] <- x[offset + depth + (r - 1)] }
r
    A[r, 1:depth] <- x[(offset + (r - 1)):(offset + (r - 1) + depth - 1)]
x[(offset + (r - 1)):(offset + (r - 1) + depth - 1)]
A[r, 1:depth]
A <- matrix(NA, nrow = depth, ncol = depth, byrow = TRUE)
A[r, 1:depth]
    A[r, 1:depth] <- x[(offset + (r - 1)):(offset + (r - 1) + depth - 1)]
for (r in 1:depth) {     A[r, 1:depth] <- x[(offset + (r - 1)):(offset + (r - 1) + depth - 1)]     b[r] <- x[offset + depth + (r - 1)] }
A
a.svd <- svd(A)
a.svd
ds <- diag(1 / a.svd$d[1:depth]) u <- a.svd$u v <- a.svd$v us <- as.matrix(u[, 1:depth]) vs <- as.matrix(v[, 1:depth])
(a.ginv <- vs %*% ds %*% t(us))
a.ginv %*% A
t(A) * A
t(A) %*% A
solveRecurrentNobias <- function(x, depth, takeLast = TRUE) {     x <- unlist(x)     if (length(x) - 2 * depth < 1) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         A <- matrix(NA, nrow = depth, ncol = depth, byrow = TRUE)         b <- matrix(NA, nrow = depth, ncol = 1)         offset <- 1         if (takeLast == TRUE) {             offset <- length(x) - 2 * depth             while ((offset > 1) & (abs(x[offset]) > 1e4))                 offset <- offset - 1             }         for (r in 1:depth) {             A[r, 1:depth] <- x[(offset + (r - 1)): (offset + (r - 1) + depth-1)]             b[r] <- x[offset + depth + (r - 1)]         }         solved <- try(solve(A, b, tol = 1e-10))         if ("matrix" != class(solved))             result <- matrix(NA, nrow = depth, ncol = 1)         else             result <- round(solved, 1);         }     t(result)[1,] }
solveRecurrentNobias(x, 8, takeLast = TRUE)
solveRecurrentNobias(x, 8, takeLast = FALSE)
?solve
.Machine$double.eps
solveRecurrentNobias <- function(x, depth, takeLast = TRUE) {     x <- unlist(x)     if (length(x) - 2 * depth < 1) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         A <- matrix(NA, nrow = depth, ncol = depth, byrow = TRUE)         b <- matrix(NA, nrow = depth, ncol = 1)         offset <- 1         if (takeLast == TRUE) {             offset <- length(x) - 2 * depth             while ((offset > 1) & (abs(x[offset]) > 1e4))                 offset <- offset - 1             }         for (r in 1:depth) {             A[r, 1:depth] <- x[(offset + (r - 1)): (offset + (r - 1) + depth-1)]             b[r] <- x[offset + depth + (r - 1)]         }         solved <- try(solve(A, b, tol = 1e-17))         if ("matrix" != class(solved))             result <- matrix(NA, nrow = depth, ncol = 1)         else             result <- round(solved, 1);         }     t(result)[1,] }
solveRecurrentNobias(x, 8, takeLast = FALSE)
solveRecurrentNobias(x, 8, takeLast = TRUE)
solveRecurrentNobias <- function(x, depth, takeLast = TRUE) {     x <- unlist(x)     if (length(x) - 2 * depth < 1) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         A <- matrix(NA, nrow = depth, ncol = depth, byrow = TRUE)         b <- matrix(NA, nrow = depth, ncol = 1)         offset <- 1         if (takeLast == TRUE) {             offset <- length(x) - 2 * depth             while ((offset > 1) & (abs(x[offset]) > 1e4))                 offset <- offset - 1             }         for (r in 1:depth) {             A[r, 1:depth] <- x[(offset + (r - 1)): (offset + (r - 1) + depth-1)]             b[r] <- x[offset + depth + (r - 1)]         }         solved <- try(solve(A, b, tol = 1e-18))         if ("matrix" != class(solved))             result <- matrix(NA, nrow = depth, ncol = 1)         else             result <- round(solved, 1);         }     t(result)[1,] }
solveRecurrentNobias(x, 8, takeLast = TRUE)
lmRecurrent(x, depth, FALSE)
lmRecurrent(x, depth, FALSE)
lmRecurrent(x, depth, FALSE)
lmRecurrent(x, depth, FALSE)
length(x)
x[i:(length(x) - depth + i - 1)]
solveRecurrentNobias(x, 8, takeLast = TRUE)
lmRecurrent(x, depth, TRUE)
lmod <- lmRecurrent(x, depth, TRUE)
lmod
summary(lmod)
formulaString <- "y~"
for (i in 1:depth) {     df[[paste0("x", i)]] <- x[i:(length(x) - depth + i - 1)]     formulaString <- paste0(formulaString, "+x", i) }
df <- data.frame(y = tail(x, - depth))
formulaString <- "y~" for (i in 1:depth) {     df[[paste0("x", i)]] <- x[i:(length(x) - depth + i - 1)]     formulaString <- paste0(formulaString, "+x", i) }
formulaString <- sub("~\\+", "~", formulaString)
formulaString
fit <- lm(formula(formulaString), df)
fit
summary(fit)
x[10]/x[9]
x[9]/x[8]
x[10]/x[9]
x[10]/x[9] / (x[9] / x[8])
x[11]/x[10] / (x[10] / x[9])
x[k] * x[k-2] / (x[k-1]^2)
k = 10
x[k] * x[k-2] / (x[k-1]^2)
x[k] * x[k-2] / (x[k-1]^2)
k = 12
x[k] * x[k-2] / (x[k-1]^2)
k = 13
x[k] * x[k-2] / (x[k-1]^2)
k = 14
x[k] * x[k-2] / (x[k-1]^2)
k = 15
x[k] * x[k-2] / (x[k-1]^2)
ds
a.svd <- svd(A)
ds <- diag(1 / a.svd$d[1:depth]) u <- a.svd$u v <- a.svd$v
us <- as.matrix(u[, 1:depth]) vs <- as.matrix(v[, 1:depth])
us
t(us) %*% b
t(us) 
b
bs <- unlist(b)
t(us) %*% bs
vs %*% ds %*% (t(us) %*% bs)
xs <- vs %*% ds %*% (t(us) %*% bs)
A %*% xs
A %*% xs - b
A %*% xs %-% b
b
A %*% xs - bs
xs
round(xs, 1)
takeLast <- TRUE
A <- matrix(NA, nrow = depth, ncol = depth, byrow = TRUE) b <- matrix(NA, nrow = depth, ncol = 1) offset <- 1 x <- unlist(x) if (takeLast == TRUE) {     offset <- length(x) - 2 * depth     while ((offset > 1) & (abs(x[offset]) > 1e4))         offset <- offset - 1 }
for (r in 1:depth) {     A[r, 1:depth] <- x[(offset + (r - 1)):(offset + (r - 1) + depth - 1)]     b[r] <- x[offset + depth + (r - 1)] }
a.svd <- svd(A) ds <- diag(1 / a.svd$d[1:depth]) u <- a.svd$u v <- a.svd$v us <- as.matrix(u[, 1:depth]) vs <- as.matrix(v[, 1:depth]) bs <- unlist(b) xs <- vs %*% ds %*% (t(us) %*% bs) round(xs, 1)
exp62 <- read.csv("../output/recurrent62.csv") exp5 <- read.csv("../output/recurrent-exp5.csv") exp562 <- exp62[exp62$Last != exp5$Last & exp5$Last == 0,] write.csv(exp562, "../output/exp5-62.csv", row.names = TRUE)
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
x <- test$Sequence[178]
x
solveRecurrentOld(x, 2)
library(gmp) solveRecurrentBias <- function(x, depth, takeLast = TRUE) {     x <- unlist(x)     if (length(x) - 2 * depth < 1) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         A <- matrix(NA, nrow = depth + 1, ncol = depth + 1, byrow = TRUE)         b <- matrix(NA, nrow = depth + 1, ncol = 1)         offset <- 1         if (takeLast == TRUE) {             offset <- length(x) - 2 * depth             while ((offset > 1) & (abs(x[offset]) > 1e4)) offset <- offset - 1         }         for (r in 1:(depth + 1)) {             A[r, 1:depth] <- x[(offset + (r - 1)) : (offset + (r - 1) + depth - 1)]             #for (c in 1:depth) A[r, c] <- x[offset + (r - 1) + (c - 1)]             A[r, depth + 1] <- 1             b[r] <- x[offset + depth + (r - 1)]         }         solved <- try(solve(A, b))         if ("matrix" != class(solved))             result <- matrix(NA, nrow = depth, ncol = 1)         else             result <- round(solved, 1);     }     t(result)[1,] } solveRecurrentNobias <- function(x, depth, takeLast = TRUE) {     x <- unlist(x)     if (length(x) - 2 * depth < 1) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         A <- matrix(NA, nrow = depth, ncol = depth, byrow = TRUE)         b <- matrix(NA, nrow = depth, ncol = 1)         offset <- 1         if (takeLast == TRUE) {             offset <- length(x) - 2 * depth             while ((offset > 1) & (abs(x[offset]) > 1e4))                 offset <- offset - 1             }         for (r in 1:depth) {             A[r, 1:depth] <- x[(offset + (r - 1)): (offset + (r - 1) + depth-1)]             b[r] <- x[offset + depth + (r - 1)]         }         solved <- try(solve(A, b))         if ("matrix" != class(solved))             result <- matrix(NA, nrow = depth, ncol = 1)         else             result <- round(solved, 1);         }     t(result)[1,] } solveRecurrentOld <- function(x, depth) {     if (length(x) < depth + 1) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         A <- matrix(0, nrow = depth, ncol = depth)         b <- matrix(0, nrow = depth, ncol = 1)         for (r in 1:depth) {             for (c in 1:depth) {                 A[r, c] <- x[1 + (r - 1) + (c - 1)]             }             b[r] <- x[1 + depth + (r - 1)]         }         result <- try(round(solve(A, b)));         if ("matrix" != class(result)) {             result <- matrix(NA, nrow = depth, ncol = 1);         }     }     t(result)[1,] } lmRecurrent <- function(x, depth, takeLast = TRUE) {     x <- unlist(x)     if (length(x) - depth < 1) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         if (takeLast) {             df <- data.frame(y = tail(x, - depth))         }         formulaString <- "y~"         for (i in 1:depth) {             df[[paste0("x", i)]] <- x[i:(length(x) - depth + i - 1)]             formulaString <- paste0(formulaString, "+x", i)         }         formulaString <- sub("~\\+", "~", formulaString)         fit <- lm(formula(formulaString), df)         maxResidual <- max(abs(fit$residuals))         df <- list()         for(i in 1:depth)         {             df[[paste0("x",i)]] <- x[length(x)-depth+i]         }         df <- as.data.frame(df)         prediction <- predict(fit, df)         prediction <- round(prediction)     }     prediction } isRecurrent <- function(x, depth, s, biased = FALSE) {     result = TRUE     if (!anyNA(s)) {         for (i in (depth + 1):(length(x) - depth)) {             value <- as.bigz(0)             for (j in 1:depth) {                 value <- add.bigz(value, div.bigz(x[i + j - 1] * as.bigz(round(s[j] * 10)), as.bigz(10)))             }             if (biased == TRUE)                 value <- value + as.bigz(round(s[j + 1]))             if (is.na(value))                 stop()             if ( value != x[i + depth]) {                 result = FALSE                 break;             }         }     } else         result = FALSE     result } predictNext <- function(x, depth, s, isRecurrent, biased = FALSE) {     if (isRecurrent) {         i <- length(x) - depth + 1;         value <- as.bigz(0)         for (j in 1:depth) {             value <- add.bigz(value, div.bigz(x[i + j - 1] * as.bigz(round(s[j] * 10)), as.bigz(10)))         }         if (biased == TRUE)             value <- value + as.bigz(round(s[j + 1]))         if (is.na(value))             stop()     } else         value <- NA     as.character(value) }
solveRecurrentOld(x, 2)
solveRecurrentOld(x, 1)
solveRecurrentOld(x, 3)
solveRecurrentOld(x, 4)
solveRecurrentOld(x, 5)
solveRecurrentOld(x, 6)
solveRecurrentOld(x, 16)
test$Repeated <- lapply(test$Sequence, function(x) {     x <- unlist(x)      length(x) > 1 & (x[length(x)] == x[length(x)-1]
} test$Repeated <- lapply(test$Sequence, function(x) {     x <- unlist(x)      (length(x) > 1) & (x[length(x)] == x[length(x)-1])
} sum(test$Repeated) test$Repeated <- lapply(test$Sequence, function(x) {     x <- unlist(x)      value <- (length(x) > 1) & (x[length(x)] == x[length(x) - 1])
    value
})
test$Repeated <- lapply(test$Sequence, function(x) {     x <- unlist(x)      value <- (length(x) > 1) & (x[length(x)] == x[length(x) - 1])
    value
})
sum(test$Repeated)
test$Repeated <- sapply(test$Sequence, function(x) {     x <- unlist(x)      value <- (length(x) > 1) & (x[length(x)] == x[length(x) - 1])
    value
})
sum(test$Repeated)
head(test$Repeated)
sum(unlist(test$Repeated))
x <- test$Sequence[210]
solveRecurrentOld(x, 1)
solveRecurrentOld(x, 2)
solveRecurrentOld(x, 3)
solveRecurrentOld(x, 4)
solveRecurrentOld(x, 5)
solveRecurrentOld(x, 6)
solveRecurrentOld(x, 7)
solveRecurrentOld(x, 8)
solveRecurrentOld(x, 0)
solveRecurrentOld(x, 9)
solveRecurrentOld(x, 10)
solveRecurrentOld(x, 11)
solveRecurrentOld(x, 12)
solveRecurrentOld(x, 13)
x
solveRecurrentOld(x, 14)
solveRecurrentOld(x, 15)
solveRecurrentOld(x, 16)
solveRecurrentOld(x, 17)
x
solveRecurrentNobias(x, 3, takeLast = FALSE)
solveRecurrentNobias(x, 3, takeLast = TRUE)
exp5 <- read.csv("../output/recurrent-exp5.csv")
exp62 <- read.csv("../output/recurrent62.csv")
exp562 <- exp62[exp62$Last != exp5$Last & exp5$Last == 0,]
length(exp562)
nrow(exp562)
head(exp562)
exp62[210]
exp62[210,]
exp5[210,]
solveRecurrentBias(x, 3, takeLast = TRUE)
solveRecurrentBias(x, 2, takeLast = TRUE)
exlm <- read.csv("../linearPrevious10WithModeFallback.csv")
exlm <- read.csv("../output/linearPrevious10WithModeFallback.csv")
exp5 <- read.csv("../output/recurrent-exp5.csv") exlm <- read.csv("../output/linearPrevious10WithModeFallback.csv") exp5lm <- exlm[exlm$Last != exp5$Last & exp5$Last == 0,]
write.csv(exp5lm, "../output/exp5-lm.csv", row.names = TRUE)
x <- test$Sequence[327] # id 649
x^(-8)
x^(1/8)
x
x <- unlist(x)
x
x^(1/8)
solveRecurrentBias(x^(1 / 8), 2, FALSE)
solveRecurrentBias(x^(1 / 8), 2, TRUE)
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
test[210,]
sink()
sink()
test[210,]
test[210,]$Sequence
isre
isRecurrent(test$BigSequence[210], 3, test$Solve0_3[210], FALSE)
isRecurrent(test$BigSequence[210], 3, test$Solve0_3[210], FALSE)
isRecurrent(test$BigSequence[210], 3, test$Solve0_3[210], FALSE)
s[1]
i
i <- 3
mapply(isRecurrent, test$BigSequence, i, test[[n("Solve0_", i)]], FALSE)
test <- test[210,]
mapply(isRecurrent, test$BigSequence, i, test[[n("Solve0_", i)]], FALSE)
mapply(isRecurrent, test$BigSequence, i, test[[n("Solve0_", i)]], FALSE)
value
x[i + depth]
value != x[i + depth]
                value <- add.bigz(value, div.bigz(x[i + j - 1] * as.bigz(round(s[j] * 10)), as.bigz(10)))
mapply(isRecurrent, test$BigSequence, i, test[[n("Solve0_", i)]], FALSE)
x[16]
value
x[i + depth]
test$BigSequence[1] <- test$BigSequence[1][15:length(test$BigSequence[1])]
mapply(isRecurrent, test$BigSequence, i, test[[n("Solve0_", i)]], FALSE)
mapply(isRecurrent, test$BigSequence, i, test[[n("Solve0_", i)]], FALSE)
rtvs::debug_source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
test <- test[210,]
test[[n("Solve0_", i)]] <- lapply(test$Sequence, FUN = solveRecurrentNobias, depth = i, takeLast = TRUE)
test
test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
test <- test[210,]
test[[n("Solve0_", i)]] <- lapply(test$Sequence, FUN = solveRecurrentNobias, depth = i, takeLast = TRUE)
test
    test[[n("Check0_", i)]] <- mapply(isRecurrent, test$BigSequence, i, test[[n("Solve0_", i)]], FALSE)
div.bigz(x[i + j - 1] )
x[i + j - 1]
s[j] * 10
                value <- add.bigz(value, div.bigz(x[i + j - 1] * as.bigz(round(s[j] * 10)), as.bigz(10)))
value
value <- 0
value
x
x[i + j - 1]
div.bigz(x[i + j - 1] * as.bigz(round(s[j] * 10)), as.bigz(10))
div.bigz(x[i + j - 1] * as.bigz(round(s[j] * 10)), as.bigz(10))
527765581332481 - 42221246506598480 + 76561193665298449
as.character(527765581332481 - 42221246506598480 + 76561193665298449)
x[i + depth]
value
x[i + depth]
div.bigz(x[i + 1 - 1] * as.bigz(round(s[1] * 10)), as.bigz(10))
div.bigz(x[i + 1 - 1] * as.bigz(round(s[1] * 10)), as.bigz(10)) + div.bigz(x[i + 2 - 1] * as.bigz(round(s[2] * 10)), as.bigz(10))
div.bigz(x[i + 1 - 1] * as.bigz(round(s[1] * 10)), as.bigz(10)) + div.bigz(x[i + 2 - 1] * as.bigz(round(s[2] * 10)), as.bigz(10)) + div.bigz(x[i + 3 - 1] * as.bigz(round(s[3] * 10)), as.bigz(10))
x[i + depth]
div.bigz(x[i + 1 - 1] * as.bigz(round(s[1] * 10)), as.bigz(10)) + div.bigz(x[i + 2 - 1] * as.bigz(round(s[2] * 10)), as.bigz(10)) + div.bigz(x[i + 3 - 1] * as.bigz(round(s[3] * 10)), as.bigz(10))
div.bigz(x[i + 3 - 1] * as.bigz(round(s[3] * 10)), as.bigz(10))
x[i + 3 - 1]
x[15]*s[1]
x[15]*s[1] + x[16]*s[2]
x[15]*s[1] + x[16]*s[2] + x[17]*s[3]
x[i + depth]
test$s
test$Sequence[210,18]
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000)
test$Sequence[210,18]
test$Sequence[210,]
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000)
test$Sequence[210,]
test$Sequence[210]
test$Sequence[210] <- gsub("38280596832649216", "38280596832649217", test$Sequence[210])
test$Sequence[210]
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$Sequence[210] <- gsub("38280596832649216", "38280596832649217", test$Sequence[210]) test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
rtvs::debug_source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Reccurence Equation Solve in doubles.R", encoding = "Windows-1252")
test <- test[232,]
test
x <- unlist(test$se)
x <- unlist(test$Sequence)
solveRecurrentOld(x, 2)
solveRecurrentOld(x, 1)
solveRecurrentOld(x, 3)
solveRecurrentOld(x, 2)
x[1] * -256 + x[2] * 257
x[3]
solveRecurrentNobias(x, 2, FALSE)
solveRecurrentNobias(x, 2, TRUE)
isRecurrent(x, 2, c(-256, 257), FALSE)
isRecurrent(x, 2, c(-256, 257), FALSE)
value
x[i + depth]
isRecurrent(test$BigSequence, 2, c(-256, 257), FALSE)
isRecurrent(unlist(test$BigSequence), 2, c(-256, 257), FALSE)
oesi <- readLines("../download/stripped.csv") oesi <- oesi[ - (1:4)] oesi <- sapply(strsplit(oesi, split = ","), FUN = function(x) unlist(x)) trim.trailing <- function(x) sub("\\s+$", "", x) oesiId <- sapply(oesi, FUN = function(x) trim.trailing(head(x, 1))) oesiSequence <- sapply(oesi, FUN = function(x) paste(unlist(x[-1]), collapse = ",")) oesiId <- trim.trailing(oesiId)
class(oesiSequence)
dv df <- data.frame(Id = oesiId, Sequence = oesiSequence)
emptySeqs <- sapply(oesiSequence, function(x) unlist(x) == "")
length(df)
nrow(df)
df <- data.frame(Id = oesiId, Sequence = oesiSequence)
nrow(df)
write.csv(df, "../download/oesi.csv", row.names = FALSE)
df
head(df)
head(test)
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$Sequence[210] <- gsub("38280596832649216", "38280596832649217", test$Sequence[210]) test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
    lookup <- data.table(read.csv("../download/oesi.csv", stringsAsFactors = FALSE))     test <- data.table(read.csv("../input/test.csv", stringsAsFactors = FALSE))
library(data.table)
    lookup <- data.table(read.csv("../download/oesi.csv", stringsAsFactors = FALSE))
    sys.time(lookup <- data.table(read.csv("../download/oesi.csv", stringsAsFactors = FALSE))[order(Sequence)])
    time(lookup <- data.table(read.csv("../download/oesi.csv", stringsAsFactors = FALSE))[order(Sequence)])
head(lookup)
names(lookup)
    lookup <- data.table(read.csv("../download/oesi.csv", stringsAsFactors = FALSE))
tail(lookup)
tail(lookup$Sequence) )
tail(lookup$Sequence)
head(lookup$Sequence)
s <- tail(lookup$s)
s <- tail(lookup$Sequence)
s
count(lookup$Sequence[lookup$Sequence != ""])
sum(lookup$Sequence != "")
sum(lookup$Sequence == "")
sum(lookup$Sequence == "")    lookup <- lookup[Sequence != ""]
    lookup <- lookup[Sequence != ""]
tail(lookup$Sequence)
    lookup <- lookup[order(Sequence)]
head(llokup)
head(lookup)
lookup[J("-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,1,-1,-1,-1,-1,0,1")]
?setkey
    setkey(lookup, Sequence)
lookup[J("-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,1,-1,-1,-1,-1,0,1")]
lookup[J("-1,-1,-1,-1,-1,-1,-1,0,0")]
    lookup <- data.table(read.csv("../download/oesi.csv", stringsAsFactors = FALSE))     lookup <- lookup[Sequence != ""]     setkey(lookup, Sequence)
lookup[J("-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,1,-1,-1,-1,-1,0,1")]
?lookup
?J
lookup[J("1,1,2,1,2,4,2,2,8,7,8,4,3,26,4,13,24,24,6,66,28,8,23,62,104,8,10,158,120,64,42,148,352,80,16,19,350,416,344,16,75,334,1052,448,160,33,756,1252,1440,208,32,136,726,2860,1936,1024,32,61,1578,3448,5176,1440,384,244,1534,7312,7056,5072,512,64")]
lookup[J("3,1,2,1,2,4,2,2,8,7,8,4,3,26,4,13,24,24,6,66,28,8,23,62,104,8,10,158,120,64,42,148,352,80,16,19,350,416,344,16,75,334,1052,448,160,33,756,1252,1440,208,32,136,726,2860,1936,1024,32,61,1578,3448,5176,1440,384,244,1534,7312,7056,5072,512,64")]
lookup[J("3,1,2,1,2", roll = "nearest")]
lookup[J("-1,-1,-1,-1,-1,-1", roll = "nearest")]
 ))
lookup[J("-1,-1,-1,-1,-1,-1"), roll = "nearest"]
?adist
"a" > "b"
"a" < "b"
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     result <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = trunc((low + high) / 2)         if (lookup$Sequence[mid] > value)             high = mid - 1         else if (lookup$Sequence[mid] < value)             low = mid + 1         else {             result <- mid             break;         }     }     result }
searchLookup["-1,-1,-1,-1,-1,-1,-1,0,0"]
searchLookup(lookup, "-1,-1,-1,-1,-1,-1,-1,0,0")
searchLookup(lookup, "3")
searchLookup(lookup, "4")
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/OeisLookup.R", encoding = "Windows-1252")
searchLookup(lookup, "3")
searchLookup(lookup, "3")
lookup$Sequence[mid]
lookup$Sequence[mid]
lookup$Sequence[mid]
lookup$Sequence[mid+1]
lookup$Sequence[mid+2]
lookup$Sequence[mid-1]
lookup$Sequence[mid]
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = trunc((low + high) / 2)         if (lookup$Sequence[mid] > value)             high = mid - 1         else if (lookup$Sequence[mid] < value)             low = mid + 1         else {             break;         }     }     mid }
searchLookup(lookup, "3")
lookup[(-2:2) + searchLookup(lookup, "3")]
lookup[(-2:2) + searchLookup(lookup, "4")]
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = trunc((low + high) / 2)         if (lookup$Sequence[mid] > value)             high = mid - 1         else if (lookup$Sequence[mid] < value)             low = mid + 1         else {             break;         }     }     lookup$Sequence[mid + 1] >= value ? mid : mid + 1 }
lookup[(-2:2) + searchLookup(lookup, "4")]
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = trunc((low + high) / 2)         if (lookup$Sequence[mid] > value)             high = mid - 1         else if (lookup$Sequence[mid] < value)             low = mid + 1         else {             break;         }     }     ifelse(lookup$Sequence[mid + 1] >= value, mid, mid + 1) }
lookup[(-2:2) + searchLookup(lookup, "4")]
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = ceiling((low + high) / 2)         if (lookup$Sequence[mid] > value)             high = mid - 1         else if (lookup$Sequence[mid] < value)             low = mid + 1         else {             break;         }     }     mid }
lookup[(-2:2) + searchLookup(lookup, "4")]
lookup[(-2:2) + searchLookup(lookup, "4,1")]
lookup[(-2:2) + searchLookup(lookup, "3")]
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = ceiling((low + high) / 2)         if (lookup$Sequence[mid] > value)             high = mid - 1         else if (lookup$Sequence[mid] < value)             low = mid + 1         else {             break;         }     }     while(mid < nrow(lookup)-1 & startsWith(lookup$Sequence[mid+1], value))         mid <- mid + 1 }
lookup[(-2:2) + searchLookup(lookup, "3")]
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = ceiling((low + high) / 2)         if (lookup$Sequence[mid] > value)             high = mid - 1         else if (lookup$Sequence[mid] < value)             low = mid + 1         else {             break;         }     }     while (mid < nrow(lookup) - 1 & startsWith(lookup$Sequence[mid + 1], value))         mid <- mid + 1 }
lookup[(-2:2) + searchLookup(lookup, "3")]
library(base)
lookup[(-2:2) + searchLookup(lookup, "3")]
?base
version()
version
library(base)
sessionInfo()
startsWith = function(x, prefix) {     if (!is.character(x) || !is.character(prefix))         stop("non-character object(s)")     suppressWarnings(substr(x, 1L, nchar(prefix)) == prefix) }
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = ceiling((low + high) / 2)         s <- lookup$Sequence[mid]         if (s > value)             high = mid - 1         else if (s < value)             low = mid + 1         else {             break;         }     }     while (mid < nrow(lookup) - 1 & startsWith(lookup$Sequence[mid + 1], value))         mid <- mid + 1 }
lookup[(-2:2) + searchLookup(lookup, "3")]
rtvs::debug_source("D:/prj/Kaggle/Integer Sequence Learning/scripts/OeisLookup.R", encoding = "Windows-1252")
lookup[(-2:2) + searchLookup(lookup, "3")]
mid < nrow(lookup) - 1
tartsWith(lookup$Sequence[mid + 1], value)
startsWith(lookup$Sequence[mid + 1], value)
lookup[(-2:2) + searchLookup(lookup, "3")]
startsWith("123", "12")
startsWith("123", "124")
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = ceiling((low + high) / 2)         s <- lookup$Sequence[mid]         if (s > value)             high = mid - 1         else if (s < value)             low = mid + 1         else {             break;         }     }     if ((mid < nrow(lookup) - 1) & (startsWith(lookup$Sequence[mid + 1], value)))         mid <- mid + 1      mid    }
lookup[(-2:2) + searchLookup(lookup, "3")]
lookup[(-2:2) + searchLookup(lookup, "3,-1")]
?setdiff
substring("123456", 3)
length("123")
length("123"[[1]])
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = ceiling((low + high) / 2)         s <- lookup$Sequence[mid]         if (s > value)             high = mid - 1         else if (s < value)             low = mid + 1         else {             break;         }     }     if ((mid < nrow(lookup) - 1) & (startsWith(lookup$Sequence[mid + 1], value)))         mid <- mid + 1     diff <- substr(lookup$Sequence[mid], nchar(value))     diffSeq <- strsplit(diff, split = ",")     diffSeq[1] }
sea
searchLookup(lookup, "3,-1")
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = ceiling((low + high) / 2)         s <- lookup$Sequence[mid]         if (s > value)             high = mid - 1         else if (s < value)             low = mid + 1         else {             break;         }     }     if ((mid < nrow(lookup) - 1) & (startsWith(lookup$Sequence[mid + 1], value)))         mid <- mid + 1     diff <- substring(lookup$Sequence[mid], nchar(value))     diffSeq <- strsplit(diff, split = ",")     diffSeq[1] }
searchLookup(lookup, "3,-1")
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/OeisLookup.R", encoding = "Windows-1252")
searchLookup(lookup, "3,-1")
lookup$Sequence[mid]
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = ceiling((low + high) / 2)         s <- lookup$Sequence[mid]         if (s > value)             high = mid - 1         else if (s < value)             low = mid + 1         else {             break;         }     }     if ((mid < nrow(lookup) - 1) & (startsWith(lookup$Sequence[mid + 1], value)))         mid <- mid + 1     diff <- substring(lookup$Sequence[mid], nchar(value)+2)     diffSeq <- strsplit(diff, split = ",")     diffSeq[1] }
searchLookup(lookup, "3,-1")
searchLookup <- function(lookup, value) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = ceiling((low + high) / 2)         s <- lookup$Sequence[mid]         if (s > value)             high = mid - 1         else if (s < value)             low = mid + 1         else {             break;         }     }     if ((mid < nrow(lookup) - 1) & (startsWith(lookup$Sequence[mid + 1], value)))         mid <- mid + 1     diff <- substring(lookup$Sequence[mid], nchar(value)+2)     diffSeq <- unlist(strsplit(diff, split = ","))     diffSeq[1] }
searchLookup(lookup, "3,-1")
head(test)
sapply(head(test$Sequence), searchLookup, lookup)
searchLookup <- function(value, lookup) {     low = 1     high = nrow(lookup)     mid <- 1     while (low <= high) {           # invariants:value > A[i] for all i < low, value < A[i] for all i > high         mid = ceiling((low + high) / 2)         s <- lookup$Sequence[mid]         if (s > value)             high = mid - 1         else if (s < value)             low = mid + 1         else {             break;         }     }     if ((mid < nrow(lookup) - 1) & (startsWith(lookup$Sequence[mid + 1], value)))         mid <- mid + 1     diff <- substring(lookup$Sequence[mid], nchar(value)+2)     diffSeq <- unlist(strsplit(diff, split = ","))     diffSeq[1] }
sapply(head(test$Sequence), FUN = searchLookup, lookup = lookup)
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/OeisLookup.R", encoding = "Windows-1252")
sapply(head(test$Sequence), FUN = searchLookup, lookup = lookup)
sapply(head(test$Sequence, 1), FUN = searchLookup, lookup = lookup)
sapply(head(test$Sequence, 1), FUN = searchLookup, lookup = lookup)
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/OeisLookup.R", encoding = "Windows-1252")
head(test$Sequence, 1)
sapply(head(test$Sequence, 1), FUN = searchLookup, lookup = lookup)
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/OeisLookup.R", encoding = "Windows-1252")
sapply(head(test$Sequence, 1), FUN = searchLookup, lookup = lookup)
    lookup <- data.table(read.csv("../download/oesi.csv", stringsAsFactors = FALSE))
library(data.table)
    lookup <- data.table(read.csv("../download/oesi.csv", stringsAsFactors = FALSE))
    lookup <- lookup[Sequence != ""]     setkey(lookup, Sequence)
    test <- data.table(read.csv("../input/test.csv", stringsAsFactors = FALSE))
rtvs::debug_source("D:/prj/Kaggle/Integer Sequence Learning/scripts/OeisLookup.R", encoding = "Windows-1252")
sapply(head(test$Sequence, 1), FUN = searchLookup, lookup = lookup)
nchar(value)
strsplit(diff, split = ",")
    diffSeq <- unlist(strsplit(diff, split = ","))
    diffSeq <- unlist(strsplit(diff, split = ","))
diffSeq
diffSeq[1]
sapply(head(test$Sequence, 10), FUN = searchLookup, lookup = lookup)
unlist(sapply(head(test$Sequence, 10), FUN = searchLookup, lookup = lookup))
unlist(sapply(head(test$Sequence, 10), FUN = searchLookup, lookup = lookup))[1]
unlist(sapply(head(test$Sequence, 10), FUN = searchLookup, lookup = lookup))[1][1]
    test$Last <- sapply(head(test$Sequence), FUN = searchLookup, lookup = lookup)
    test$Last <- sapply(test$Sequence, FUN = searchLookup, lookup = lookup)
sum(test$Last!= "")
sum(test$Last != NA)
sum(!is.na(test$Last))
sum(is.na(test$Last))
    write.csv(df[, c("Id", "Last", "Sequence")], "../download/lookup.csv", row.names = FALSE)
    write.csv(test[, c("Id", "Last", "Sequence")], "../download/lookup.csv", row.names = FALSE)
    write.csv(test, "../download/lookup.csv", row.names = FALSE)
    write.csv(test[    fwrite(test, "../download/lookup.csv", row.names = FALSE), c("Id", "Last", "Sequence")], "../download/lookup.csv", row.names = FALSE)
library(data.table)
require(readr)
    fwrite(test, "../download/lookup.csv", row.names = FALSE)
head(test[,"Id"])
head(test[,c("Id")])
    test[, Sequence := NULL]
    write.csv(test, "../download/lookup.csv", row.names = FALSE)
mid
head(lookup)
submission17 <- read.csv("../submissions/submissions/17 (17772)/submission.csv", stringsAsFactors = FALSE)
submission17 <- read.csv("../submissions/17 (17772)/submission.csv", stringsAsFactors = FALSE)
submission17 <- read.csv("../submissions/17 (17772)/submission.csv", stringsAsFactors = FALSE)
verified <- read.csv(test, "../download/lookup.csv", stringsAsFactors = FALSE)
verified <- read.csv("../download/lookup.csv", stringsAsFactors = FALSE)
verified <- data.table(read.csv("../download/lookup.csv", stringsAsFactors = FALSE))
setkey(verified, Id)
submission17 <- sapply(submission17$Id, function(x) verified[J(x)])
submission17 <- read.csv("../submissions/17 (17772)/submission.csv", stringsAsFactors = FALSE)
submission17$Verified <- sapply(submission17$Id, function(x) verified[J(x)])
sapply(head(submission17$Id), function(x) verified[J(x)])
verified[J(1)]
str(verified)
verified <- data.table(read.csv("../download/lookup.csv", stringsAsFactors = FALSE, colClasses = c("integer", "character")))
hear(verified)
head(verified)
setkey(verified, Id)
submission17$Verified <- sapply(submission17$Id, function(x) verified[J(x)])
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/OeisLookup.R", encoding = "Windows-1252")
submission17$Verified <- sapply(1: nrow(submission17), function(i) {     verified[J(submission17$Id[i])]
    if (i %% 1000 == 0) {         print(paste("Done", i, "sequences"))     }
})
sum(submission17$Verified == submission17$Last)
head(submis)
head(submission17)
tail(submission17)
sum(submission17$Verified != NULL)
str(verified)
verified <- data.table(read.csv("../download/lookup.csv", stringsAsFactors = FALSE, colClasses = c("integer", "character")))
str(verified)
setkey(verified, Id)
str(verified)
verified[J(submission17$Id[1])]
verified[J(submission17$Id[2])]
submission17$Verified <- sapply(1: nrow(submission17), function(i) {     if (i %% 1000 == 0) {         print(paste("Done", i, "sequences"))     }
    verified[J(submission17$Id[i])]
})
submission17 <- read.csv("../submissions/17 (17772)/submission.csv", stringsAsFactors = FALSE)
submission17$Verified <- sapply(1: nrow(submission17), function(i) {     if (i %% 1000 == 0) {         print(paste("Done", i, "sequences"))     }
    verified[J(submission17$Id[i])]
})
s <- sapply(113000: nrow(submission17), function(i) {     if (i %% 1000 == 0) {         print(paste("Done", i, "sequences"))     }
    verified[J(submission17$Id[i])]
})
s <- sapply(1: nrow(submission17), function(i) {     if (i %% 1000 == 0) {         print(paste("Done", i, "sequences"))     }
    verified[J(submission17$Id[i])]
})
head(s)
s <- sapply(1: nrow(submission17), function(i) {     if (i %% 1000 == 0) {         print(paste("Done", i, "sequences"))     }
    verified[J(submission17$Id[i])]$Last
})
head(s)
submission17$Verified <- s
sum(submission17$Verified == submission17$Last)
head(submission17)
sum(submission17$Verified == submission17$Last, na.rm)
sum(submission17$Verified == submission17$Last, na.rm = T)
nrow(subm)
nrow(submission17)
nrow(submission17) / 19918
19918 / nrow(submission17)
test$Repeated <- sapply(test$Sequence, function(x) {     x <- unlist(x)     value <- (length(x) > 1) & (x[length(x)] == x[length(x) - 1])     value }) sum(unlist(test$Repeated)) #5524
head(test$)test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$Sequence[210] <- gsub("38280596832649216", "38280596832649217", test$Sequence[210]) test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000)
test$Sequence[210] <- gsub("38280596832649216", "38280596832649217", test$Sequence[210])
test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz)
library(gmp)
test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
test$Repeated <- sapply(test$Sequence, function(x) {     x <- unlist(x)     value <- (length(x) > 1) & (x[length(x)] == x[length(x) - 1])     value })
sum(unlist(test$Repeated)) #5524
sum(test$Repeated) #5524
test$Repeated <- unlist(test$Repeated))
test$Repeated <- unlist(test$Repeated)
r <- which(test$Repeated)
r <- which(test$Repeated == TRUE)
head(r)
sr <- submission17[r] 
sr <- submission17[r,] 
sr[sr$Last != 0]
sum(sr$Last != 0)
sum(sr$Last == 0)
nrow(submission17)
nrow(test)
submission17[r,] <- sapply(test$Sequence[r], tail, 1)
submission17 <- read.csv("../submissions/17 (17772)/submission.csv", stringsAsFactors = FALSE)
submission17$Last[r] <- sapply(test$Sequence[r], tail, 1)
sum(submission17$Last != 0)
write.csv(submission17, "../submissions/17 (17772)/submissionWithRepeats.csv", row.names = FALSE)
submission17 <- read.csv("../submissions/17 (17772)/submission.csv", stringsAsFactors = FALSE, colClasses = c("integer", "character"))
submission17$Last[r] <- sapply(test$Sequence[r], tail, 1)
write.csv(submission17, "../submissions/17 (17772)/submissionWithRepeats.csv", row.names = FALSE)
submission17 <- read.csv("../submissions/17 (17772)/submission.csv", stringsAsFactors = FALSE, colClasses = c("integer", "character"))
r <- which(test$Repeated == TRUE & submission17$Last != 0) submission17$Last[r] <- sapply(test$Sequence[r], tail, 1) write.csv(submission17, "../submissions/17 (17772)/submissionWithRepeats.csv", row.names = FALSE)
r <- which(test$Repeated == TRUE & submission17$Last == 0) submission17$Last[r] <- sapply(test$Sequence[r], tail, 1) write.csv(submission17, "../submissions/17 (17772)/submissionWithRepeats.csv", row.names = FALSE)
x <- test$Sequence[327] # id 649 x <- unlist(x) solveRecurrentBias(x ^ (1 / 8), 2, TRUE) # 0 1 2
solveRecurrentBias <- function(x, depth, takeLast = TRUE) {     x <- unlist(x)     if (length(x) - 2 * depth < 1) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         A <- matrix(NA, nrow = depth + 1, ncol = depth + 1, byrow = TRUE)         b <- matrix(NA, nrow = depth + 1, ncol = 1)         offset <- 1         if (takeLast == TRUE) {             offset <- length(x) - 2 * depth             while ((offset > 1) & (abs(x[offset]) > 1e4))                 offset <- offset - 1             }         for (r in 1:(depth + 1)) {             A[r, 1:depth] <- x[(offset + (r - 1)):(offset + (r - 1) + depth - 1)]             #for (c in 1:depth) A[r, c] <- x[offset + (r - 1) + (c - 1)]             A[r, depth + 1] <- 1             b[r] <- x[offset + depth + (r - 1)]         }         solved <- try(solve(A, b))         if ("matrix" != class(solved))             result <- matrix(NA, nrow = depth, ncol = 1)         else             result <- round(solved, 1);         }     t(result)[1,] } solveRecurrentNobias <- function(x, depth, takeLast = TRUE) {     x <- unlist(x)     if (length(x) - 2 * depth < 1) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         A <- matrix(NA, nrow = depth, ncol = depth, byrow = TRUE)         b <- matrix(NA, nrow = depth, ncol = 1)         offset <- 1         if (takeLast == TRUE) {             offset <- length(x) - 2 * depth             while ((offset > 1) & (abs(x[offset]) > 1e4))                 offset <- offset - 1             }         for (r in 1:depth) {             A[r, 1:depth] <- x[(offset + (r - 1)):(offset + (r - 1) + depth - 1)]             b[r] <- x[offset + depth + (r - 1)]         }         solved <- try(solve(A, b))         if ("matrix" != class(solved))             result <- matrix(NA, nrow = depth, ncol = 1)         else             result <- round(solved, 1);         }     t(result)[1,] } solveRecurrentOld <- function(x, depth) {     if (length(x) < depth + 1) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         A <- matrix(0, nrow = depth, ncol = depth)         b <- matrix(0, nrow = depth, ncol = 1)         for (r in 1:depth) {             for (c in 1:depth) {                 A[r, c] <- x[1 + (r - 1) + (c - 1)]             }             b[r] <- x[1 + depth + (r - 1)]         }         result <- try(round(solve(A, b)));         if ("matrix" != class(result)) {             result <- matrix(NA, nrow = depth, ncol = 1);         }     }     t(result)[1,] } lmRecurrent <- function(x, depth, takeLast = TRUE) {     x <- unlist(x)     if (length(x) - depth < 1) {         result <- matrix(NA, nrow = depth, ncol = 1);     } else {         if (takeLast) {             df <- data.frame(y = tail(x, - depth))         }         formulaString <- "y~"         for (i in 1:depth) {             df[[paste0("x", i)]] <- x[i:(length(x) - depth + i - 1)]             formulaString <- paste0(formulaString, "+x", i)         }         formulaString <- sub("~\\+", "~", formulaString)         fit <- lm(formula(formulaString), df)         maxResidual <- max(abs(fit$residuals))         df <- list()         for(i in 1:depth)         {             df[[paste0("x",i)]] <- x[length(x)-depth+i]         }         df <- as.data.frame(df)         prediction <- predict(fit, df)         prediction <- round(prediction)     }     prediction } isRecurrent <- function(x, depth, s, biased = FALSE) {     result = FALSE     if (!anyNA(s)) {         ts <- t(head(s, depth))         bias = ifelse(biased, tail(s, 1), 0)         match <- 0         notmatch <- 0         for (i in depth:(length(x) - depth)) {             value <- ts %*% x[i:(i + depth - 1)] + bias             if (is.na(value))                 stop()             if (abs(value - x[i + depth]) < abs(value) / 1E8)                 match <- match + 1             else                 notmatch <- notmatch + 1             }         result <- match > notmatch     }     result } predictNext <- function(x, depth, s, isRecurrent, biased = FALSE) {     #print(id)     s <- unlist(s)     if (isRecurrent) {         i <- length(x) - depth + 1;         value <- as.bigz(0)         for (j in 1:depth) {             value <- add.bigz(value, div.bigz(x[i + j - 1] * as.bigz(round(s[j] * 10)), as.bigz(10)))         }         if (biased == TRUE)             value <- value + as.bigz(round(s[j + 1]))         if (is.na(value))             stop()         } else             value <- NA         as.character(value) } #system.time(rec4 <- lapply(sequences, isRecurrent, depth = 4)) # 1.7 on 10000, then 3.07 when value == x[] changed to abs(value - x) < 0.01, but records found 6120 instead of 227 test <- read.csv("../input/test.csv", stringsAsFactors = FALSE, nrow = 10000000) test$Sequence[210] <- gsub("38280596832649216", "38280596832649217", test$Sequence[210]) test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric) # length(testseq) == 113845 #test$Solve2 <- lapply(test$Sequence, FUN = solveRecurrent, depth = 2) #test$Check2 <- mapply(isRecurrent, test$Sequence, 2, test$Solve2) # sum(test$Check2 == TRUE) 2510 # sum(test$Check3 == TRUE) 2586 # sum(test$Check4 == TRUE) 2505 # sum(test$Check5 == TRUE) 1637 n <- function(prefix, number) {     paste(prefix, i, sep = "") } limitDepth <- 70
#powers x <- test$Sequence[327] # id 649 x <- unlist(x) solveRecurrentBias(x ^ (1 / 8), 2, TRUE) # 0 1 2
x <- test$Sequence[327] 
x
x <- unlist(x)
x
test$BigSequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.bigz) test$Sequence <- sapply(strsplit(test$Sequence, split = ","), FUN = as.numeric)
x <- test$Sequence[327] # id 649 x <- unlist(x) solveRecurrentBias(x ^ (1 / 8), 2, TRUE) # 0 1 2
submission17 <- read.csv("../submissions/17 (17772)/submission.csv", stringsAsFactors = FALSE, colClasses = c("integer", "character"))
r <- which(test$Repeated == TRUE & submission17$Last == 0) submission17$Last[r] <- sapply(test$Sequence[r], tail, 1)
r$Last[r$Last == 0] <- 1
r <- which(submission17$Last == 0)
submission17$Last[submission17$Last == 0] <- 1
write.csv(submission17, "../submissions/17 (17772)/submissionWithRepeats.csv", row.names = FALSE)
submission17 <- read.csv("../submissions/17 (17772)/submission.csv", stringsAsFactors = FALSE, colClasses = c("integer", "character"))
submission17$Last[r] <- sapply(test$Sequence[r], tail, 1)
r <- which(submission17$Last == 0)
r <- which(submission17$Last == 0)
submission17$Last[r] <- 1
write.csv(submission17, "../submissions/17 (17772)/submissionWithRepeats.csv", row.names = FALSE)
source("D:/prj/Kaggle/Integer Sequence Learning/scripts/Repeats.R", encoding = "Windows-1252")
